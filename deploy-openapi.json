{
  "openapi": "3.0.0",
  "info": {
    "title": "Deploy API",
    "version": "7.3.2.0"
  },
  "servers": [
    {
      "url": "https://localhost:8443/cli"
    }
  ],
  "paths": {
    "/agentCLI": {
      "parameters": [],
      "delete": {
        "parameters": [
          {
            "description": "Name or ID of the agent",
            "in": "query",
            "name": "agent",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "Agents should be shut down before deletion.",
        "operationId": "deleteAgent",
        "summary": "Delete an agent"
      },
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "active",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "getAgents",
        "summary": "Get information about all agents"
      },
      "put": {
        "parameters": [
          {
            "description": "Name or ID of the agent",
            "in": "query",
            "name": "agent",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "updateAgent",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "configurationTemplate": "Name or id of the Agent Configuration Template to set for this agent",
                "description": "The description of the agent",
                "impersonationForce": "Force impersonation. When set to true, do not allow steps or resource configuration to change impersonation settings",
                "impersonationGroup": "Default group to use for impersonation",
                "impersonationPassword": "Password to use for impersonation (only applicable for Windows)",
                "impersonationUseSudo": "Use sudo for impersonation (only applicable for *nix)",
                "impersonationUser": "Default user to use for impersonation",
                "licenseType": "License type to use for this agent",
                "name": "Name of the agent"
              },
              "schema": {}
            }
          },
          "required": true
        },
        "summary": "Update agent settings"
      }
    },
    "/agentCLI/bulkGetAgentJavaHomes": {
      "parameters": [],
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command returns a list of managed Java installations for a set of agents. Individual sub-requests may succeed or fail independently. A single request may contain up to 250 sub-requests.",
        "operationId": "bulkGetAgentJavaHomes",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "README": "See entity attribute for the template description expected by this endpoint.",
                "entity": [
                  {
                    "agent": "Name or ID of an agent"
                  }
                ]
              },
              "schema": {}
            }
          },
          "required": true
        },
        "summary": "Get list of managed Java installations in bulk"
      }
    },
    "/agentCLI/bulkInstallAgentJava": {
      "parameters": [],
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command request a set of agents install Java, but does not wait for or report the results. The returned maintenance tasks can be used to query the result. Individual sub-requests may succeed or fail independently. A single request may contain up to 250 sub-requests.",
        "operationId": "bulkInstallAgentJava",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "README": "See entity attribute for the template description expected by this endpoint.",
                "entity": [
                  {
                    "agent": "Name or ID of an agent",
                    "package": "Name or ID of the Java package"
                  }
                ]
              },
              "schema": {}
            }
          },
          "required": true
        },
        "summary": "Install Java packages as a new managed Java installations in bulk"
      }
    },
    "/agentCLI/bulkSetAgentJavaHome": {
      "parameters": [],
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command requests a set of agents set JAVA_HOME, but does not wait for or report the results. Each new JAVA_HOME will not take effect until the respective agent is restarted. The returned maintenance tasks can be used to query the results.Individual sub-requests may succeed or fail independently. A single request may contain up to 250 sub-requests.",
        "operationId": "bulkSetAgentJavaHome",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "README": "See entity attribute for the template description expected by this endpoint.",
                "entity": [
                  {
                    "agent": "Name or ID of an agent",
                    "javahome": "Name of managed Java install or absolute path of a valid JAVA_HOME directory"
                  }
                ]
              },
              "schema": {}
            }
          },
          "required": true
        },
        "summary": "Set the configured JAVA_HOME of agents in bulk"
      }
    },
    "/agentCLI/bulkUninstallAgentJava": {
      "parameters": [],
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command requests a set of agents uninstall Java, but does not wait for or report the result. If an installation is the active JAVA_HOME or configured as JAVA_HOME, that installation is not removed. The returned maintenance tasks can be used to query the result. Individual sub-requests may succeed or fail independently. A single request may contain up to 250 sub-requests.",
        "operationId": "bulkUninstallAgentJava",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "README": "See entity attribute for the template description expected by this endpoint.",
                "entity": [
                  {
                    "agent": "Name or ID of an agent",
                    "package": "Name of a managed Java package"
                  }
                ]
              },
              "schema": {}
            }
          },
          "required": true
        },
        "summary": "Uninstall a managed Java installations in bulk"
      }
    },
    "/agentCLI/deleteProperty": {
      "parameters": [],
      "put": {
        "parameters": [
          {
            "description": "Name or ID of the agent",
            "in": "query",
            "name": "agent",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the property",
            "in": "query",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "operationId": "deleteAgentProperty",
        "summary": "Remove a property from an agent"
      }
    },
    "/agentCLI/getAgentJavaHomes": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Name or ID of the agent",
            "in": "query",
            "name": "agent",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command returns a list of managed Java installations for an agent.",
        "operationId": "getAgentJavaHomes",
        "summary": "Get list of managed Java installations"
      }
    },
    "/agentCLI/getProperty": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Name or ID of the agent",
            "in": "query",
            "name": "agent",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the property",
            "in": "query",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/plain": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "getAgentProperty",
        "summary": "Get the value of a property on an agent"
      }
    },
    "/agentCLI/info": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Name or ID of the agent",
            "in": "query",
            "name": "agent",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command returns a JSON representation of an agent.",
        "operationId": "getAgent",
        "summary": "Get information about an agent"
      }
    },
    "/agentCLI/installJava": {
      "parameters": [],
      "post": {
        "parameters": [
          {
            "description": "Name or ID of the agent",
            "in": "query",
            "name": "agent",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the Java package",
            "in": "query",
            "name": "package",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command requests the agent install Java, but does not wait for or report the result. The returned maintenance task can be used to query the result.",
        "operationId": "installAgentJava",
        "summary": "Install a Java package as a new managed Java installation"
      }
    },
    "/agentCLI/maintenanceTask": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "ID of maintenance task",
            "in": "query",
            "name": "task",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "getAgentMaintenanceTask"
      }
    },
    "/agentCLI/maintenanceTasks": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Name or ID of the agent",
            "in": "query",
            "name": "agent",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "getAgentMaintenanceTasks"
      }
    },
    "/agentCLI/rename": {
      "parameters": [],
      "put": {
        "parameters": [
          {
            "description": "Name or ID of the agent to rename",
            "in": "query",
            "name": "agent",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The new name for the agent",
            "in": "query",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "Rename an agent. Use this command if running the agent configuration script in the agent bin directory is not convenient. Only the administrator can run this method.",
        "operationId": "forceRenameAgent",
        "summary": "Rename an agent"
      }
    },
    "/agentCLI/restart": {
      "parameters": [],
      "put": {
        "parameters": [
          {
            "description": "Name or ID of the agent",
            "in": "query",
            "name": "agent",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "restartAgent",
        "summary": "Restart an agent"
      }
    },
    "/agentCLI/setJavaHome": {
      "parameters": [],
      "post": {
        "parameters": [
          {
            "description": "Name or ID of the agent",
            "in": "query",
            "name": "agent",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of managed Java install or absolute path of a valid JAVA_HOME directory",
            "in": "query",
            "name": "javahome",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command requests the agent set JAVA_HOME, but does not wait for or report the result. The new JAVA_HOME will not take effect until the agent is restarted. The returned maintenance task can be used to query the result.",
        "operationId": "setAgentJavaHome",
        "summary": "Set the configured JAVA_HOME of an agent"
      }
    },
    "/agentCLI/setProperty": {
      "parameters": [],
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "setAgentProperty",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "agent": "Name or ID of the agent",
                "description": "The description of the property (optional)",
                "isSecure": "Whether the property is secure; the default is the current state of the property, or false if the property is not yet specified (optional)",
                "label": "The label of the property (optional)",
                "name": "Name of the property",
                "value": "New value for the property (optional)"
              },
              "schema": {}
            }
          },
          "required": true
        },
        "summary": "Set a property on a agent"
      }
    },
    "/agentCLI/shutdown": {
      "parameters": [],
      "put": {
        "parameters": [
          {
            "description": "Name or ID of the agent",
            "in": "query",
            "name": "agent",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "shutdownAgent",
        "summary": "Shut down an agent"
      }
    },
    "/agentCLI/statuses": {
      "parameters": [],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "getAgentStatuses",
        "summary": "Returns a JSONObject with count of agents to status. Expected format:\n{\n    \"ONLINE\":4,\n    \"UPGRADE_RECOMMENDED\":1\n}\n\nRequires Settings Tab permission"
      }
    },
    "/agentCLI/tag": {
      "parameters": [],
      "delete": {
        "parameters": [
          {
            "description": "Name or ID of the agent",
            "in": "query",
            "name": "agent",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the tag",
            "in": "query",
            "name": "tag",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "operationId": "removeTagFromAgent",
        "summary": "Delete a tag from an agent"
      },
      "get": {
        "parameters": [
          {
            "description": "Name or ID of the agent",
            "in": "query",
            "name": "agent",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "getTagsOnAgent",
        "summary": "List all tags on an agent"
      },
      "put": {
        "parameters": [
          {
            "description": "Name or ID of the agent",
            "in": "query",
            "name": "agent",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the tag",
            "in": "query",
            "name": "tag",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Hex representation of the color for the tag, such as FF0000. This parameter is used only if the tag is being created.",
            "in": "query",
            "name": "color",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Description of the tag. This parameter is used only if the tag is being created.",
            "in": "query",
            "name": "description",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "operationId": "addTagToAgent",
        "summary": "Add a tag to an agent"
      }
    },
    "/agentCLI/teams": {
      "parameters": [],
      "delete": {
        "parameters": [
          {
            "description": "Name or ID of the agent",
            "in": "query",
            "name": "agent",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the team",
            "in": "query",
            "name": "team",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the type to use. Leave blank if you are using the type \"Standard Application\".",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "operationId": "removeAgentFromTeam",
        "summary": "Remove an agent from a team"
      },
      "put": {
        "parameters": [
          {
            "description": "Name or ID of the agent",
            "in": "query",
            "name": "agent",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the team",
            "in": "query",
            "name": "team",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the type to use. Leave blank if you are using the type \"Standard Application\".",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "operationId": "addAgentToTeam",
        "summary": "Add an agent to a team"
      }
    },
    "/agentCLI/test": {
      "parameters": [],
      "put": {
        "parameters": [
          {
            "description": "Name or ID of the agent",
            "in": "query",
            "name": "agent",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "testAgent",
        "summary": "Test the connection from an agent to the server"
      }
    },
    "/agentCLI/uninstallJava": {
      "parameters": [],
      "post": {
        "parameters": [
          {
            "description": "Name or ID of the agent",
            "in": "query",
            "name": "agent",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of a package to uninstall from the agent",
            "in": "query",
            "name": "package",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command requests the agent uninstall Java, but does not wait for or report the result. If an installation is the active JAVA_HOME or configured as JAVA_HOME, that installation is not removed.",
        "operationId": "uninstallAgentJava",
        "summary": "Uninstall a managed Java installation"
      }
    },
    "/agentCLI/upgrade": {
      "parameters": [],
      "put": {
        "parameters": [
          {
            "description": "Name or ID of the agent",
            "in": "query",
            "name": "agent",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "The agent will be upgraded to the agent version corresponding with the server version.",
        "operationId": "upgradeAgent",
        "summary": "Upgrade an agent"
      }
    },
    "/agentCLI/usage": {
      "parameters": [],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "getHighWatermarks",
        "summary": "Return high watermarks for agent usage"
      }
    },
    "/agentPool": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "active",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "Return a JSON representation of all agent pools.",
        "operationId": "getAgentPools",
        "summary": "Get information about all agent pools"
      }
    },
    "/agentPool/addAgentToPool": {
      "parameters": [],
      "put": {
        "parameters": [
          {
            "description": "Name or ID of the agent pool",
            "in": "query",
            "name": "pool",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the agent",
            "in": "query",
            "name": "agent",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "operationId": "addAgentToPool",
        "summary": "Add an agent to an agent pool"
      }
    },
    "/agentPool/createAgentPool": {
      "parameters": [],
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "createAgentPool",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "agents": [
                  "Agent ID or name",
                  "Agent ID or name (repeat as necessary)"
                ],
                "description": "Description",
                "name": "Name of the agent pool"
              },
              "schema": {}
            }
          },
          "required": true
        },
        "summary": "Create an agent pool"
      }
    },
    "/agentPool/deleteAgentPool": {
      "parameters": [],
      "delete": {
        "parameters": [
          {
            "description": "Name or ID of the agent pool",
            "in": "query",
            "name": "pool",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "operationId": "deleteAgentPool",
        "summary": "Delete an agent pool"
      }
    },
    "/agentPool/info": {
      "parameters": [],
      "put": {
        "parameters": [
          {
            "description": "Name or ID of the agent pool",
            "in": "query",
            "name": "pool",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "Returns a JSON representation of an agent pool.",
        "operationId": "getAgentPool",
        "summary": "Get information about an agent pool"
      }
    },
    "/agentPool/removeAgentFromPool": {
      "parameters": [],
      "delete": {
        "parameters": [
          {
            "description": "Name or ID of the agent pool",
            "in": "query",
            "name": "pool",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the agent",
            "in": "query",
            "name": "agent",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "operationId": "removeAgentFromPool",
        "summary": "Remove an agent from an agent pool"
      }
    },
    "/agentPool/teams": {
      "parameters": [],
      "delete": {
        "parameters": [
          {
            "description": "Name or ID of the agent pool",
            "in": "query",
            "name": "agentPool",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the team",
            "in": "query",
            "name": "team",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the type to use. Leave blank if you are using the type \"Standard agent pool\".",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "operationId": "removeAgentPoolFromTeam",
        "summary": "Remove an agent pool from a team"
      },
      "put": {
        "parameters": [
          {
            "description": "Name or ID of the agent pool",
            "in": "query",
            "name": "agentPool",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the team",
            "in": "query",
            "name": "team",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the type to use. Leave blank if you are using the type \"Standard agent pool\".",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "operationId": "addAgentPoolToTeam",
        "summary": "Add an agent pool to a team"
      }
    },
    "/application": {
      "parameters": [],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command returns a JSON representation of all applications.",
        "operationId": "getApplications",
        "summary": "Get information about all applications on the server"
      }
    },
    "/application/addComponentToApp": {
      "parameters": [],
      "put": {
        "parameters": [
          {
            "description": "Name of the component",
            "in": "query",
            "name": "component",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the application",
            "in": "query",
            "name": "application",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "addComponentToApplication",
        "summary": "Add a component to an application."
      }
    },
    "/application/blueprintsInApplication": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Name or ID of the application",
            "in": "query",
            "name": "application",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "getBlueprintsInApplication",
        "summary": "Get all blueprints in an application"
      }
    },
    "/application/componentsInApplication": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Name or ID of the application",
            "in": "query",
            "name": "application",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "getComponentsInApplication",
        "summary": "Get all components in an application"
      }
    },
    "/application/create": {
      "parameters": [],
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "createApplication",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "description": "Description",
                "enforceCompleteSnapshots": "Specify true to require an explicit version for each component",
                "name": "Application name or ID",
                "notificationScheme": "Notification scheme",
                "onlyChangedVersions": "If true, the 'Only Deploy Changed Versions' deployment option will be checked by default (default: true)",
                "teamMappings": [
                  {
                    "resourceRoleId": "Id of Resource Type to apply to this team mapping (optional, can specify either this or resourceRoleLabel",
                    "resourceRoleLabel": "Name of Resource Type to apply to this team mapping (optional, can specify either this or resourceRoleId",
                    "teamId": "ID of a team, either this field or teamLabel are needed to specify a team",
                    "teamLabel": "Name of the team to map the environment to, either this field or teamId are needed to specify a team"
                  }
                ],
                "useWizard": "Specify true to use the Deployment Wizard when submitting application process request (default: false)"
              },
              "schema": {}
            }
          },
          "required": true
        },
        "summary": "Create an application from a JSON file"
      }
    },
    "/application/createApplicationFromTemplate": {
      "parameters": [],
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "createApplicationFromTemplate",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "description": "Description",
                "enforceCompleteSnapshots": "Specify true to require an explicit version for each component",
                "existingComponentIds": "The list of existing Component IDs to attach the application.",
                "name": "Application name or ID",
                "notificationScheme": "Notification scheme",
                "teamMappings": [
                  {
                    "resourceRoleId": "Id of Resource Type to apply to this team mapping (optional, can specify either this or resourceRoleLabel",
                    "resourceRoleLabel": "Name of Resource Type to apply to this team mapping (optional, can specify either this or resourceRoleId",
                    "teamId": "ID of a team, either this field or teamLabel are needed to specify a team",
                    "teamLabel": "Name of the team to map the environment to, either this field or teamId are needed to specify a team"
                  }
                ],
                "templateId": "The ID of the template to use. If you are using an application template, either this field or templateName are required.",
                "templateName": "The name of the template to use. If you are using an application template, either this field or templateId are required.",
                "templateProperties": [
                  {
                    "name": "The name of the property defined on the template. Required properties must be included here",
                    "value": "Value of the property to set on the new application"
                  }
                ],
                "templateVersion": "The version of the template to use. This field is required if you are using an application template."
              },
              "schema": {}
            }
          },
          "required": true
        },
        "summary": "Create an application with components from a JSON file"
      }
    },
    "/application/deleteApplication": {
      "parameters": [],
      "delete": {
        "parameters": [
          {
            "description": "Name or ID of the application",
            "in": "query",
            "name": "application",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "operationId": "deleteApplication",
        "summary": "Delete an application"
      }
    },
    "/application/environmentsInApplication": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Name or ID of the application",
            "in": "query",
            "name": "application",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "getEnvironmentsInApplication",
        "summary": "Get information about all environments in an application"
      }
    },
    "/application/export": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Name or ID of the application",
            "in": "query",
            "name": "application",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "exportApplication",
        "summary": "Export an application to a json file."
      }
    },
    "/application/getProperties": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Name or ID of the application",
            "in": "query",
            "name": "application",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "getApplicationProperties",
        "summary": "Get all application properties and their values."
      }
    },
    "/application/getProperty": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Name or ID of the application",
            "in": "query",
            "name": "application",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the property",
            "in": "query",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/plain": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "getApplicationProperty",
        "summary": "Get the value of a custom property on a application"
      }
    },
    "/application/import": {
      "parameters": [],
      "put": {
        "parameters": [
          {
            "description": "Suppport values are UPGRADE_IF_EXISTS, CREATE_NEW_IF_EXISTS, FAIL_IF_DOESNT_EXIST, UPGRADE_IF_EXISTS, USE_EXISTING_IF_EXISTS. Default is UPGRADE_IF_EXISTS.",
            "in": "query",
            "name": "componentUpgradeType",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Suppport values are UPGRADE_IF_EXISTS, CREATE_NEW_IF_EXISTS, FAIL_IF_DOESNT_EXIST, UPGRADE_IF_EXISTS, USE_EXISTING_IF_EXISTS. Default is UPGRADE_IF_EXISTS.",
            "in": "query",
            "name": "applicationUpgradeType",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Suppport values are UPGRADE_IF_EXISTS, CREATE_NEW_IF_EXISTS, FAIL_IF_DOESNT_EXIST, UPGRADE_IF_EXISTS, USE_EXISTING_IF_EXISTS. Default is UPGRADE_IF_EXISTS.",
            "in": "query",
            "name": "processUpgradeType",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Suppport values are UPGRADE_IF_EXISTS, CREATE_NEW_IF_EXISTS, FAIL_IF_DOESNT_EXIST, UPGRADE_IF_EXISTS, USE_EXISTING_IF_EXISTS. Default is UPGRADE_IF_EXISTS.",
            "in": "query",
            "name": "resourceTemplateUpgradeType",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Whether to import full resource tree or just base resources. true or false. Default false",
            "in": "query",
            "name": "importFullResourceTrees",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "create or update.",
            "in": "query",
            "name": "disposition",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "importApplication",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {}
            }
          },
          "required": true
        },
        "summary": "Import application from json file."
      }
    },
    "/application/info": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Name or ID of the application",
            "in": "query",
            "name": "application",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command returns a JSON representation of an application.",
        "operationId": "getApplication",
        "summary": "Get information about an application"
      }
    },
    "/application/propValue": {
      "parameters": [],
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "setApplicationProperty",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "application": "Name or ID of the application",
                "description": "The description of the property (optional)",
                "isSecure": "Whether the property is secure; the default is the current state of the property, or false if the property is not yet specified (optional)",
                "label": "The label of the property (optional)",
                "name": "Property name",
                "value": "Property value (optional)"
              },
              "schema": {}
            }
          },
          "required": true
        },
        "summary": "Set a property on an application"
      }
    },
    "/application/snapshotsInApplication": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Name or ID of the application",
            "in": "query",
            "name": "application",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Cap the number of results. Any value less than 1 returns all results.",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "Snapshots are listed from most recent to least recent.",
        "operationId": "getSnapshotsInApplication",
        "summary": "Get information about snapshots in an application"
      }
    },
    "/application/tag": {
      "parameters": [],
      "delete": {
        "parameters": [
          {
            "description": "Name or ID of the application",
            "in": "query",
            "name": "application",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the tag",
            "in": "query",
            "name": "tag",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "operationId": "removeTagFromApplication",
        "summary": "Remove a tag from an application"
      },
      "get": {
        "parameters": [
          {
            "description": "Name or ID of the application",
            "in": "query",
            "name": "application",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "getTagsOnApplication",
        "summary": "List all tags on an application"
      },
      "put": {
        "parameters": [
          {
            "description": "Name or ID of the application",
            "in": "query",
            "name": "application",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the tag",
            "in": "query",
            "name": "tag",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Hex representation of the color for the tag, such as FF0000. This parameter is used only if the tag is being created.",
            "in": "query",
            "name": "color",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Description of the tag. This parameter is used only if the tag is being created.",
            "in": "query",
            "name": "description",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "operationId": "addTagToApplication",
        "summary": "Add a tag to an application"
      }
    },
    "/application/teams": {
      "parameters": [],
      "delete": {
        "parameters": [
          {
            "description": "Name or ID of the application.",
            "in": "query",
            "name": "application",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the team.",
            "in": "query",
            "name": "team",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the security type to use; the default is Standard Application.",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "operationId": "removeApplicationFromTeam",
        "summary": "Remove an application from a team"
      },
      "put": {
        "parameters": [
          {
            "description": "Name or ID of the application",
            "in": "query",
            "name": "application",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the team",
            "in": "query",
            "name": "team",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the type to use. Leave blank if you are using the type \"Standard Application\".",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "operationId": "addApplicationToTeam",
        "summary": "Add an application to a team"
      }
    },
    "/application/{application}/webhooks": {
      "parameters": [
        {
          "description": "Id or name of application",
          "in": "path",
          "name": "application",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "parameters": [
          {
            "description": "Id or name of webhook template",
            "in": "query",
            "name": "webhookTemplate",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Url for the webhook",
            "in": "query",
            "name": "url",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of environment to add the webhook to. This can be repeated for multiple environments.",
            "in": "query",
            "name": "environment",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "addWebhookToApplication",
        "summary": "Add a webhook to an application"
      }
    },
    "/application/{application}/webhooks/{webhook}": {
      "parameters": [
        {
          "description": "Id of webhook to remove",
          "in": "path",
          "name": "webhook",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "Id of application",
          "in": "path",
          "name": "application",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "delete": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "operationId": "removeWebhookFromApplication",
        "summary": "Removes a webhook from a process"
      },
      "put": {
        "parameters": [
          {
            "description": "Id or name of webhook template",
            "in": "query",
            "name": "webhookTemplate",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Url for the webhook",
            "in": "query",
            "name": "url",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of environment to add the webhook to. This can be repeated for multiple environments.",
            "in": "query",
            "name": "environment",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "updateWebhookForApplication",
        "summary": "Update an application webhook"
      }
    },
    "/applicationPipeline": {
      "parameters": [],
      "delete": {
        "parameters": [
          {
            "description": "Application name or id. Required if pipeline specified by name.",
            "in": "query",
            "name": "application",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Pipeline name or id.",
            "in": "query",
            "name": "pipeline",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "deleteApplicationPipeline",
        "summary": "Delete an application pipeline"
      },
      "get": {
        "parameters": [
          {
            "description": "Application name or id.",
            "in": "query",
            "name": "application",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Index of first pipeline to be returned.",
            "in": "query",
            "name": "startIndex",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "getApplicationPipelines",
        "summary": "Get a list of up to 100 application pipelines"
      },
      "put": {
        "parameters": [
          {
            "description": "Application name or id. Required if pipeline specified by name.",
            "in": "query",
            "name": "application",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Pipeline name or id.",
            "in": "query",
            "name": "pipeline",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "operationId": "updateApplicationPipeline",
        "requestBody": {
          "$ref": "#/components/requestBodies/updateApplicationPipeline"
        },
        "summary": "Update an application pipeline definition"
      }
    },
    "/applicationPipeline/create": {
      "parameters": [],
      "post": {
        "parameters": [
          {
            "description": "Application name or id.",
            "in": "query",
            "name": "application",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "createApplicationPipeline",
        "requestBody": {
          "$ref": "#/components/requestBodies/updateApplicationPipeline"
        },
        "summary": "Create a new application pipeline"
      }
    },
    "/applicationPipeline/execute": {
      "parameters": [],
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "executeApplicationPipeline",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "application": "Application name or id. Only required when pipeline is referenced by name.",
                "pipeline": "Pipeline name or id",
                "snapshot": "Name or id of snapshot. Only snapshot or versions should be specified.",
                "versions": [
                  {
                    "component": "Name or id of component. Required when version referenced by name",
                    "version": "Version name or id."
                  }
                ]
              },
              "schema": {}
            }
          },
          "required": true
        },
        "summary": "Execute an application pipeline"
      }
    },
    "/applicationPipeline/execution": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Application  name or id. Required if pipeline argument is a name.",
            "in": "query",
            "name": "application",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Pipeline name or id.",
            "in": "query",
            "name": "pipeline",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Index of the first result to return. At most 100 results will be returned.",
            "in": "query",
            "name": "startIndex",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Specifies the date range beginning in miiliseconds since epoch.",
            "in": "query",
            "name": "dateRangeBegin",
            "required": false,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Specifies the date range end in miiliseconds since epoch.",
            "in": "query",
            "name": "dateRangeEnd",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "getApplicationPipelineExecutions",
        "summary": "Get a list of up to 100 application pipeline executions"
      }
    },
    "/applicationPipeline/execution/cancel": {
      "parameters": [],
      "post": {
        "parameters": [
          {
            "description": "Id of the pipeline execution.",
            "in": "query",
            "name": "executionId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/text": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "cancelApplicationPipelineExecution",
        "summary": "Cancel an application pipeline execution"
      }
    },
    "/applicationPipeline/execution/info": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Id of the pipeline execution.",
            "in": "query",
            "name": "executionId",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "getApplicationPipelineExecution",
        "summary": "Get an application pipeline execution"
      }
    },
    "/applicationPipeline/info": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Application name or id. Required if pipeline specified by name.",
            "in": "query",
            "name": "application",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Pipeline name or id.",
            "in": "query",
            "name": "pipeline",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "getApplicationPipeline",
        "summary": "Get an application pipeline definition"
      }
    },
    "/applicationProcess": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Name or ID of the application",
            "in": "query",
            "name": "application",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "Returns a JSON representation of all application processes for a specific application.",
        "operationId": "getAllApplicationProcessesForApplication",
        "summary": "Get all application processes of an application"
      }
    },
    "/applicationProcess/create": {
      "parameters": [],
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "createApplicationProcess",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "application": "Application ID",
                "description": "Description. This template includes one step, which deploys a component.",
                "disableSnapshots": "When true, prevent deployments using any snapshot and this application process",
                "inventoryManagementType": "The inventory management for the process request, such as AUTOMATIC",
                "name": "Application process name",
                "offlineAgentHandling": "PRE_EXECUTION_CHECK",
                "propDefs": [
                  {
                    "label": "Property label",
                    "name": "Property name",
                    "type": "TEXT"
                  }
                ],
                "properties": [
                  {
                    "description": "Description",
                    "name": "Property name",
                    "secure": true,
                    "value": "Property value"
                  }
                ],
                "requiredRoleId": "Required Role Name or ID",
                "rootActivity": {
                  "children": [
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "allowFailure": false,
                              "children": [],
                              "componentName": "Component name",
                              "componentProcessName": "Component process name",
                              "name": "First step name",
                              "properties": {},
                              "type": "componentProcess"
                            }
                          ],
                          "componentName": "Component name",
                          "name": "inventoryVersionCheck",
                          "status": "Active",
                          "type": "inventoryVersionDiff"
                        }
                      ],
                      "componentName": "Component name",
                      "failFast": "false",
                      "maxIteration": "-1",
                      "name": "First step name",
                      "runOnlyOnFirst": "false",
                      "type": "componentEnvironmentIterator"
                    },
                    {
                      "children": [],
                      "name": "FINISH",
                      "type": "finish"
                    }
                  ],
                  "edges": [
                    {
                      "to": "First step name",
                      "type": "ALWAYS",
                      "value": ""
                    },
                    {
                      "from": "First step name",
                      "to": "FINISH",
                      "type": "ALWAYS",
                      "value": ""
                    }
                  ],
                  "name": "GRAPH",
                  "offsets": [
                    {
                      "name": "First step name",
                      "x": "-35",
                      "y": "210"
                    },
                    {
                      "name": "FINISH",
                      "x": "0",
                      "y": "420"
                    }
                  ],
                  "propDefs": [],
                  "type": "graph",
                  "versionPresets": []
                }
              },
              "schema": {}
            }
          },
          "required": true
        },
        "summary": "Create an application process"
      }
    },
    "/applicationProcess/delete": {
      "parameters": [],
      "delete": {
        "parameters": [
          {
            "description": "Name or ID of the application",
            "in": "query",
            "name": "application",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the application process",
            "in": "query",
            "name": "processName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "operationId": "deleteApplicationProcess"
      }
    },
    "/applicationProcess/info": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Name or ID of the application",
            "in": "query",
            "name": "application",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the process",
            "in": "query",
            "name": "applicationProcess",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "Returns a JSON representation of an application process.",
        "operationId": "getApplicationProcess",
        "summary": "Get information about an application process"
      }
    },
    "/applicationProcess/unfilledProperties": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Name or ID of the application",
            "in": "query",
            "name": "application",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the application process",
            "in": "query",
            "name": "processName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the snapshot (optional)",
            "in": "query",
            "name": "snapshot",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Get the properties based on if they were deployed to the specified environment (optional)",
            "in": "query",
            "name": "environment",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "If a snapshot name or ID is specified, results include any component process steps which have some properties marked to receive values later for a specific version based on the snapshot.",
        "operationId": "getApplicationProcessUnfilledProperties",
        "summary": "List properties that must be specified for a process"
      }
    },
    "/applicationProcessRequest": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "A timestamp, in milliseconds from the UNIX epoch. If you specify this parameter, the server includes the application process requests that were created after the specified timestamp.",
            "in": "query",
            "name": "startedAfter",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "An index number that specifies the application process request to start with. You can use this index number to page through results.",
            "in": "query",
            "name": "startIndex",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command returns a JSON representation of all application process requests, up to a maximum of 100.",
        "operationId": "getApplicationsProcessRequests",
        "summary": "Get information about all application process requests on the server"
      }
    },
    "/applicationProcessRequest/count": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "A timestamp, in milliseconds from the UNIX epoch. If you specify this parameter, the server counts all application process requests that were created after the specified timestamp.",
            "in": "query",
            "name": "startedAfter",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command returns the total number of application process requests for all applications.",
        "operationId": "getApplicationsProcessRequestsCount",
        "summary": "Count all application process requests"
      }
    },
    "/applicationProcessRequest/info/{requestID}": {
      "parameters": [
        {
          "description": "The ID of the application process request.",
          "in": "path",
          "name": "requestID",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command retrieves a specific application process request by id.",
        "operationId": "getApplicationProcessRequest",
        "summary": "Get information about a specific application process request"
      }
    },
    "/applicationProcessRequest/info/{requestID}/properties": {
      "parameters": [
        {
          "description": "The ID of the application process request.",
          "in": "path",
          "name": "requestID",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "getApplicationProcessRequestProperties"
      }
    },
    "/applicationProcessRequest/repeatRequest": {
      "parameters": [],
      "put": {
        "parameters": [
          {
            "description": "ID of the application process request to repeat",
            "in": "query",
            "name": "request",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "repeatApplicationProcessRequest",
        "summary": "Repeat an application process request"
      }
    },
    "/applicationProcessRequest/request": {
      "parameters": [],
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "A version may be set to 'latest' to deploy the latest version of that component.",
        "operationId": "requestApplicationProcess",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "application": "Application name or ID",
                "applicationProcess": "Application process name or ID",
                "date": "Date and time to schedule the process for. (Optional) Supports unix timecodes or the format yyyy-mm-dd HH:mm",
                "description": "Description for the request (Optional)",
                "environment": "Environment name or ID",
                "onlyChanged": "Specify false to force deployment of versions that are already in the inventory (Optional)",
                "post-deploy-message": "The body of the PUT message. You can use the variable ${p:finalStatus}, which holds the state of the process. The possible states are:Success, Failure, Approval Rejected, Awaiting Approval, Running, Scheduled, Cancelled, and Unknown. (Optional)",
                "post-deploy-put-url": "The URL that the post-deploy-message is PUT to. (Optional)",
                "properties": {
                  "Property name": "Property value (Optional)"
                },
                "recurrencePattern": "To make a scheduled process recur, specify 'D' (daily), 'W' (weekly), or 'M' (monthly). (Optional)",
                "snapshot": "Snapshot name or ID (Optional)",
                "versions": [
                  {
                    "component": "Component name or ID for the version, if you are using version name instead of ID.",
                    "version": "Version name or ID (Repeat as necessary. Not used with snapshots)"
                  }
                ]
              },
              "schema": {}
            }
          },
          "required": true
        },
        "summary": "Run an application process"
      }
    },
    "/applicationProcessRequest/requestStatus": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "ID of the application process request",
            "in": "query",
            "name": "request",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "Will return both the status of the request (which indicates if it is still running) and the request result (which indicates the result of the process if it completed).",
        "operationId": "getApplicationProcessRequestStatus",
        "summary": "Request the status of an application process request"
      }
    },
    "/applicationProcessRequest/{request}": {
      "parameters": [
        {
          "description": "The ID of the application process request.",
          "in": "path",
          "name": "request",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "getApplicationProcessExecution",
        "summary": "Get an application process request's activity trace."
      }
    },
    "/applicationTemplate": {
      "parameters": [],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command returns a JSON representation of all application templates.",
        "operationId": "getApplicationTemplates",
        "summary": "Get information about all application templates on the server"
      },
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "createApplicationTemplate",
        "requestBody": {
          "$ref": "#/components/requestBodies/createApplicationTemplate"
        },
        "summary": "Create an application template from a JSON file"
      }
    },
    "/applicationTemplate/deleteApplicationTemplate": {
      "parameters": [],
      "delete": {
        "parameters": [
          {
            "description": "Name or ID of the application",
            "in": "query",
            "name": "applicationTemplate",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "operationId": "deleteApplicationTemplate",
        "summary": "Delete an application template"
      }
    },
    "/applicationTemplate/info": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Name or ID of the application template",
            "in": "query",
            "name": "applicationTemplate",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command returns a JSON representation of an application template",
        "operationId": "getApplicationTemplate",
        "summary": "Get information about an application template"
      }
    },
    "/applicationTemplate/propSheetDef": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Name or ID of the application template",
            "in": "query",
            "name": "applicationTemplate",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "getApplicationTemplatePropDefs",
        "summary": "Get information about the property definitions for the application template"
      },
      "put": {
        "parameters": [
          {
            "description": "Name or ID of the application template",
            "in": "query",
            "name": "applicationTemplate",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "updateApplicationTemplatePropDefs",
        "requestBody": {
          "$ref": "#/components/requestBodies/updateApplicationTemplatePropDefs"
        },
        "summary": "Update an application template prop sheet def from a JSON file."
      }
    },
    "/applicationTemplate/update": {
      "parameters": [],
      "put": {
        "parameters": [
          {
            "description": "The name or ID of an existing application template",
            "in": "query",
            "name": "applicationTemplate",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "updateApplicationTemplate",
        "requestBody": {
          "$ref": "#/components/requestBodies/createApplicationTemplate"
        },
        "summary": "Update an application template"
      }
    },
    "/approval/task/": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Include approval tasks that have been created or edited since this provided time. (Optional)",
            "in": "query",
            "name": "modifiedAfter",
            "required": false,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command returns the approval tasks that have been modified since the given time.",
        "operationId": "getApprovalTasks",
        "summary": "List recent approval tasks"
      }
    },
    "/approval/task/tasksForUser": {
      "parameters": [],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "getTasksForUser",
        "summary": "Return all approval tasks and manual tasks assigned to the user"
      }
    },
    "/approval/task/{taskId}/close": {
      "parameters": [
        {
          "description": "The ID of the task.",
          "in": "path",
          "name": "taskId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "closeTask",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "comment": "Comment to close the task with",
                "p:Property name": "Property value (Optional, Repeatable)",
                "passFail": "Submit pass to approve, fail to fail"
              },
              "schema": {}
            }
          },
          "required": true
        },
        "summary": "Approve or reject an approval task"
      }
    },
    "/authenticationRealm/info": {
      "parameters": [],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command returns a JSON representation of all authentication realms.",
        "operationId": "getAuthenticationRealms",
        "summary": "Get information about all authentication realms on the server"
      }
    },
    "/authenticationRealm/{authenticationRealm}/updateUsers": {
      "parameters": [
        {
          "description": "Name of the authentication realm",
          "in": "path",
          "name": "authenticationRealm",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command updates all users in an authentication realm",
        "operationId": "updateUsersInAuthRealm",
        "summary": "Update all users in an authentication realm"
      }
    },
    "/blueprint/getBlueprintNodePropertiesTemplate": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Name or ID of the blueprint",
            "in": "query",
            "name": "blueprint",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the application; this parameter is required if you specify the blueprint name instead of ID",
            "in": "query",
            "name": "application",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command returns a JSON template of the properties that are required to provision a blueprint.",
        "operationId": "getBlueprintNodePropertiesTemplate",
        "summary": "Get blueprint properties"
      }
    },
    "/calendar/maintenanceBlackout": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Start time of the search range. In the format MM-dd-yyyy-HH:mm or in milliseconds since the UNIX epoch time.  (Optional) If rangeStart is provided then rangeEnd must also be provided",
            "in": "query",
            "name": "rangeStart",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "End time of the search range. In the format MM-dd-yyyy-HH:mm or in milliseconds since the UNIX epoch time. (Optional)",
            "in": "query",
            "name": "rangeEnd",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "getMaintenanceBlackouts",
        "summary": "Returns a list of all Maintenance Blackouts that start or end within the specified range. If no range is provided then all Maintenance Blackouts will be returned"
      },
      "post": {
        "parameters": [
          {
            "description": "The date the maintenance blackout starts. In the format MM-dd-yyyy-HH:mm or in milliseconds since the UNIX epoch time.",
            "in": "query",
            "name": "startDate",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The date the maintenance blackout ends. In the format MM-dd-yyyy-HH:mm or in milliseconds since the UNIX epoch time.",
            "in": "query",
            "name": "endDate",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "createMaintenanceBlackout",
        "summary": "Create a Maintenance Blackout for the given date range. The date range cannot overlap with any existing Maintenance Blackout date ranges"
      },
      "put": {
        "parameters": [
          {
            "description": "The id of the Maintenance Blackout to cancel.",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The date the maintenance blackout starts. In the format MM-dd-yyyy-HH:mm or in milliseconds since the UNIX epoch time. (Optional)",
            "in": "query",
            "name": "startDate",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The date the maintenance blackout ends. In the format MM-dd-yyyy-HH:mm or in milliseconds since the UNIX epoch time. (Optional)",
            "in": "query",
            "name": "endDate",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "updateMaintenanceBlackout",
        "summary": "Modifies the time range for the given Maintenance Blackout. A date cannot be modified if it has already occurred"
      }
    },
    "/calendar/maintenanceBlackout/{id}": {
      "parameters": [
        {
          "description": "The id of the Maintenance Blackout to delete.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "delete": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "deleteMaintenanceBlackout",
        "summary": "Delete the given maintenance blackout"
      }
    },
    "/component": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "active",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command returns a JSON representation of all components on the server.",
        "operationId": "getComponents",
        "summary": "Get information about all components on the server"
      }
    },
    "/component/addEnvProp": {
      "parameters": [],
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "addEnvironmentProperty",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "component": "Name or ID of the component",
                "default": "Default value (Optional)",
                "description": "Description for the property (Optional)",
                "label": "Label of the property (Optional)",
                "name": "Name of the property",
                "pattern": "A regular expression that specifies valid values for the property. Follows java.util.regex.Pattern (Optional)",
                "required": "Whether the property is required (Optional, Boolean)",
                "secure": "Specify true to create a secure property (Optional, Boolean)"
              },
              "schema": {}
            }
          },
          "required": true
        },
        "summary": "Create a component environment property"
      }
    },
    "/component/addResPropDef": {
      "parameters": [],
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "addComponentResourcePropDef",
        "requestBody": {
          "$ref": "#/components/requestBodies/addComponentResourcePropDef"
        },
        "summary": "Create a component resource property definition"
      }
    },
    "/component/componentList": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Name or ID of the component template",
            "in": "query",
            "name": "template",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command returns a JSON representation of a list of components.",
        "operationId": "getAllComponentsForTemplate",
        "summary": "Get a list of all components using this template"
      }
    },
    "/component/create": {
      "parameters": [],
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "createComponent",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "cleanupCountToKeep": "Number of most recent versions to keep; omit this parameter to inherit the system settings (Optional)",
                "cleanupDaysToKeep": "Number of days to keep versions; omit this parameter to inherit the system settings (Optional)",
                "defaultVersionType": "The default type to create versions with; valid values are FULL and INCREMENTAL",
                "description": "Description",
                "importAutomatically": "Specify true to import new versions automatically",
                "inheritSystemCleanup": "Inherit the system cleanup settings. If set to true, this overrides the other cleanup attributes. (Optional, Boolean)",
                "integrationAgent": "ID of the Agent to use for importing new component versions (Optional)",
                "integrationTag": "Tag name of the Agent to use for importing new component versions (Optional)",
                "name": "Component name or ID",
                "properties": {
                  "Source configuration plugin property name": "Property value"
                },
                "sourceConfigPlugin": "The name of the source configuration plug-in to use (Optional)",
                "teamMappings": [
                  {
                    "resourceRoleId": "Id of Resource Type to apply to this team mapping (optional, can specify either this or resourceRoleLabel",
                    "resourceRoleLabel": "Name of Resource Type to apply to this team mapping (optional, can specify either this or resourceRoleId",
                    "teamId": "ID of a team, either this field or teamLabel are needed to specify a team",
                    "teamLabel": "Name of the team to map the environment to, either this field or teamId are needed to specify a team"
                  }
                ],
                "templateId": "ID of the template to use (Optional)",
                "templateName": "Name of a template to use; this parameter is ignored if  templateId is specified (Optional)",
                "templateVersion": "Version number of the specified template (Optional)",
                "useVfs": "Boolean"
              },
              "schema": {}
            }
          },
          "required": true
        },
        "summary": "Create a component"
      }
    },
    "/component/deleteComponent": {
      "parameters": [],
      "delete": {
        "parameters": [
          {
            "description": "Name or ID of the component",
            "in": "query",
            "name": "component",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "operationId": "deleteComponent",
        "summary": "Delete a component"
      }
    },
    "/component/export": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Name or ID of the component",
            "in": "query",
            "name": "component",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "exportComponent",
        "summary": "Export a component to a json file."
      }
    },
    "/component/getProperties": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Name or ID of the component",
            "in": "query",
            "name": "component",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command returns all component properties.",
        "operationId": "getComponentProperties",
        "summary": "Get values for component properties"
      }
    },
    "/component/getProperty": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Name or ID of the component",
            "in": "query",
            "name": "component",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the property.",
            "in": "query",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/plain": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "getComponentProperty",
        "summary": "Get the value of a property on a component. Property names can be prefixed to specify which set of propertieswill be searched. Unprefixed properties will search custom 'Component Properties' on a component while a propertynamed such as template/propertyName will search the properties inherited from a component templates property definitions."
      }
    },
    "/component/import": {
      "parameters": [],
      "put": {
        "parameters": [
          {
            "description": "Suppport values are UPGRADE_IF_EXISTS, CREATE_NEW_IF_EXISTS, FAIL_IF_DOESNT_EXIST, UPGRADE_IF_EXISTS, USE_EXISTING_IF_EXISTS. Default is UPGRADE_IF_EXISTS.",
            "in": "query",
            "name": "componentTemplateUpgradeType",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Suppport values are UPGRADE_IF_EXISTS, CREATE_NEW_IF_EXISTS, FAIL_IF_DOESNT_EXIST, UPGRADE_IF_EXISTS, USE_EXISTING_IF_EXISTS. Default is UPGRADE_IF_EXISTS.",
            "in": "query",
            "name": "processUpgradeType",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "create or update",
            "in": "query",
            "name": "disposition",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "importComponent",
        "summary": "Import component from json file."
      }
    },
    "/component/info": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Name or ID of the component",
            "in": "query",
            "name": "component",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command returns a JSON representation of a component.",
        "operationId": "getComponent",
        "summary": "Get information about a component"
      }
    },
    "/component/integrate": {
      "parameters": [],
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command polls the source configuration for new component versions. Add property name/value pairs as necessary - this can be used to add specific versions.",
        "operationId": "importVersions",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "component": "Component name or ID",
                "properties": {
                  "Source configuration plugin property name": "Property value"
                }
              },
              "schema": {}
            }
          },
          "required": true
        },
        "summary": "Import new component versions"
      }
    },
    "/component/propValue": {
      "parameters": [],
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "setComponentProperty",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "component": "Name or ID of the component",
                "description": "The description of the property (optional)",
                "isSecure": "Whether the property is secure; the default is the current state of the property, or false if the property is not yet specified (optional)",
                "label": "The label of the property (optional)",
                "name": "Name of the property",
                "value": "Value of the property (optional)"
              },
              "schema": {}
            }
          },
          "required": true
        },
        "summary": "Set a property on a component"
      }
    },
    "/component/removeEnvProp": {
      "parameters": [],
      "delete": {
        "parameters": [
          {
            "description": "Name or ID of the component",
            "in": "query",
            "name": "component",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the property to remove",
            "in": "query",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "removeEnvironmentProperty",
        "summary": "Delete a component environment property"
      }
    },
    "/component/removeResPropDef": {
      "parameters": [],
      "delete": {
        "parameters": [
          {
            "description": "Name or ID of the component",
            "in": "query",
            "name": "component",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the property definition to remove",
            "in": "query",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "removeComponentResourcePropDef",
        "summary": "Delete a component resource property definition"
      }
    },
    "/component/tag": {
      "parameters": [],
      "delete": {
        "parameters": [
          {
            "description": "Name or ID of the component",
            "in": "query",
            "name": "component",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the tag",
            "in": "query",
            "name": "tag",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "operationId": "removeTagFromComponent",
        "summary": "Delete a tag from a component"
      },
      "get": {
        "parameters": [
          {
            "description": "Name or ID of the component",
            "in": "query",
            "name": "component",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "getTagsOnComponent",
        "summary": "Return all tags on a component"
      },
      "put": {
        "parameters": [
          {
            "description": "Name or ID of the component",
            "in": "query",
            "name": "component",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the tag",
            "in": "query",
            "name": "tag",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Hex representation of the color for the tag, such as FF0000. This parameter is used only if the tag is being created.",
            "in": "query",
            "name": "color",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Description of the tag. This parameter is used only if the tag is being created.",
            "in": "query",
            "name": "description",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "operationId": "addTagToComponent",
        "summary": "Add a tag to a component"
      }
    },
    "/component/teams": {
      "parameters": [],
      "delete": {
        "parameters": [
          {
            "description": "Name or ID of the component",
            "in": "query",
            "name": "component",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the team",
            "in": "query",
            "name": "team",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the type to use. Leave blank if you are using the type \"Standard Component\".",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "operationId": "removeComponentFromTeam",
        "summary": "Remove a component from a team"
      },
      "put": {
        "parameters": [
          {
            "description": "Name or ID of the component",
            "in": "query",
            "name": "component",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the team",
            "in": "query",
            "name": "team",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the type to use. Leave blank if you are using the type \"Standard Component\".",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "operationId": "addComponentToTeam",
        "summary": "Add a component to a team"
      }
    },
    "/component/update": {
      "parameters": [],
      "put": {
        "parameters": [
          {
            "description": "The name or id of an existing component",
            "in": "query",
            "name": "component",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "updateComponent",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "cleanupCountToKeep": "Number of most recent versions to keep; omit this parameter to inherit the system settings (Optional)",
                "cleanupDaysToKeep": "Number of days to keep versions; omit this parameter to inherit the system settings (Optional)",
                "defaultVersionType": "The default type to create versions with; valid values are FULL and INCREMENTAL (Optional)",
                "description": "Description (Optional)",
                "importAutomatically": "Specify true to import new versions automatically (Optional)",
                "inheritSystemCleanup": "Inherit the system cleanup settings. If set to true, this overrides the other cleanup attributes. (Optional, Boolean)",
                "integrationAgent": "ID of the Agent to use for importing new component versions (Optional)",
                "integrationTag": "Tag name of the Agent to use for importing new component versions (Optional)",
                "properties": {
                  "Source configuration plugin property name": "Property value"
                },
                "sourceConfigPlugin": "The name of the source configuration plug-in to use (Optional)",
                "teamMappings": [
                  {
                    "resourceRoleId": "Id of Resource Type to apply to this team mapping (optional, can specify either this or resourceRoleLabel",
                    "resourceRoleLabel": "Name of Resource Type to apply to this team mapping (optional, can specify either this or resourceRoleId",
                    "teamId": "ID of a team, either this field or teamLabel are needed to specify a team",
                    "teamLabel": "Name of the team to map the environment to, either this field or teamId are needed to specify a team"
                  },
                  "(Optional)"
                ],
                "template/nameOfTemplateProperty": "value of a template-inherited property with name prefixed by 'template/' (Optional)",
                "templateId": "ID of the template to use (Optional)",
                "templateName": "Name of a template to use; this parameter is ignored if  templateId is specified (Optional)",
                "templateVersion": "Version number of the specified template (Optional)",
                "useVfs": "Boolean (Optional)"
              },
              "schema": {}
            }
          },
          "required": true
        },
        "summary": "Update the basic settings of a component"
      }
    },
    "/component/updateEnvProp": {
      "parameters": [],
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "updateEnvironmentProperty",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "component": "Name or ID of the component",
                "default": "Default value (Optional)",
                "description": "Description for the property (Optional)",
                "label": "Label of the property (Optional)",
                "name": "Name of the property",
                "pattern": "A regular expression that specifies valid values for the property. Follows java.util.regex.Pattern (Optional)",
                "required": "Whether the property is required (Optional, Boolean)"
              },
              "schema": {}
            }
          },
          "required": true
        },
        "summary": "Update a component environment property"
      }
    },
    "/component/updateResPropDef": {
      "parameters": [],
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "updateComponentResourcePropDef",
        "requestBody": {
          "$ref": "#/components/requestBodies/addComponentResourcePropDef"
        },
        "summary": "Update a component resource property definition"
      }
    },
    "/component/versionPropDefs": {
      "parameters": [],
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "Component version properties are available to each version of the component.",
        "operationId": "setComponentVersionPropDef",
        "requestBody": {
          "$ref": "#/components/requestBodies/addComponentResourcePropDef"
        },
        "summary": "Set a version property for a component"
      }
    },
    "/component/versions": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Name or ID of the component",
            "in": "query",
            "name": "component",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Specify true to include archived versions; the default is false",
            "in": "query",
            "name": "inactive",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Specify a number greater than 0 to limit the number of results. If numResults is not specified, or is given to be < 1, no limit is applied.",
            "in": "query",
            "name": "numResults",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "getComponentVersions",
        "summary": "Get the versions of a component"
      }
    },
    "/componentProcess/create": {
      "parameters": [],
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "createComponentProcess",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "active": "true",
                "component": "Component ID",
                "configActionType": "ADD",
                "defaultWorkingDir": "${p:resource/work.dir}/${p:component.name}",
                "description": "Description. This template includes two steps: Download Artifacts and Run Shell as a good starting point for your component process.",
                "inventoryActionType": "ADD",
                "name": "Name of the component process",
                "propDefs": [],
                "rootActivity": {
                  "children": [
                    {
                      "allowFailure": false,
                      "children": [],
                      "commandName": "Download Artifacts",
                      "impersonationUseSudo": false,
                      "name": "First step",
                      "pluginName": "Versioned File Storage",
                      "pluginVersion": 16,
                      "properties": {
                        "artifactSetBaseDir": "",
                        "compId": "${p:component.id}",
                        "directoryOffset": ".",
                        "fileExcludePatterns": "",
                        "fileIncludePatterns": "**/*",
                        "fullVerification": true,
                        "label": "${p:version.name",
                        "repositoryId": "${p:component/code_station/repository}",
                        "repositoryUrl": "${p:server.url}/vfs",
                        "resId": "${p:resource.id}",
                        "serverUrl": "${p:server.url}",
                        "setFileExecuteBits": false,
                        "syncMode": true,
                        "verifyFileIntegrity": false
                      },
                      "showHidden": false,
                      "type": "plugin",
                      "useImpersonation": false
                    },
                    {
                      "allowFailure": false,
                      "children": [],
                      "commandName": "Shell",
                      "impersonationUseSudo": false,
                      "name": "Second step",
                      "pluginName": "Shell",
                      "pluginVersion": 3,
                      "properties": {
                        "directoryOffset": ".",
                        "outputFile": "",
                        "runAsDaemon": false,
                        "scriptBody": "echo \"Hello World\"",
                        "shellInterpreter": ""
                      },
                      "showHidden": false,
                      "type": "plugin",
                      "useImpersonation": false
                    },
                    {
                      "children": [],
                      "name": "FINISH",
                      "type": "finish"
                    }
                  ],
                  "edges": [
                    {
                      "to": "First step",
                      "type": "ALWAYS",
                      "value": ""
                    },
                    {
                      "from": "First step",
                      "to": "Second step",
                      "type": "ALWAYS",
                      "value": ""
                    },
                    {
                      "from": "Second step",
                      "to": "FINISH",
                      "type": "ALWAYS",
                      "value": ""
                    }
                  ],
                  "layoutMode": "auto",
                  "name": "GRAPH",
                  "offsets": [
                    {
                      "name": "First step",
                      "x": "-65",
                      "y": "90"
                    },
                    {
                      "name": "Second step",
                      "x": "-70",
                      "y": "210"
                    },
                    {
                      "name": "FINISH",
                      "x": "-60",
                      "y": "450"
                    }
                  ],
                  "type": "graph"
                },
                "status": "Active",
                "takesVersion": "Specify true for a deployment or rollback process; specify false for an operational (no version needed) process"
              },
              "schema": {}
            }
          },
          "required": true
        },
        "summary": "Create a new component process"
      }
    },
    "/componentProcess/info": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Name or ID of the component",
            "in": "query",
            "name": "component",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the component process",
            "in": "query",
            "name": "componentProcess",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Whether to get the latest draft process. Default is false",
            "in": "query",
            "name": "draft",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command returns a JSON representation of a component process.",
        "operationId": "getComponentProcess",
        "summary": "Get information about a component process"
      }
    },
    "/componentProcessRequest/count": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Name or ID of the component",
            "in": "query",
            "name": "component",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A timestamp, in milliseconds from the UNIX epoch. If you specify this parameter, the server counts all CPRs that were created after the specified timestamp.",
            "in": "query",
            "name": "submittedAfter",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command returns a count of all the component process requests of a specific componentsubmitted after a certain time.",
        "operationId": "getComponentProcessRequestCount",
        "summary": "Get the number of component process requests submitted after a certain time given a specified component"
      }
    },
    "/componentProcessRequest/countAll": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "A timestamp, in milliseconds from the UNIX epoch. If you specify this parameter, the server counts all CPRs that were created after the specified timestamp.",
            "in": "query",
            "name": "submittedAfter",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "True or false, whether to include ghosted components in the result.",
            "in": "query",
            "name": "includeGhosted",
            "required": false,
            "schema": {
              "default": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command returns a count of all the component process requests submitted after a certain time.",
        "operationId": "getAllComponentProcessRequestCount",
        "summary": "Get all component process requests submitted after a certain time"
      }
    },
    "/componentProcessRequest/info": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Name or ID of the component",
            "in": "query",
            "name": "component",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Time value that marks the oldest CPR we want to retrieve.",
            "in": "query",
            "name": "submittedAfter",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command returns a JSON representation of a list of up to 100 component process requests at a time.",
        "operationId": "getComponentProcessRequests",
        "summary": "Get information about all component process requests"
      }
    },
    "/componentProcessRequest/info/{requestID}": {
      "parameters": [
        {
          "description": "The ID of the component process request.",
          "in": "path",
          "name": "requestID",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "Generally used as an endpoint to retrieve APRs that were scheduled in advance.",
        "operationId": "getComponentProcessRequest",
        "summary": "Get information about a specific component process request"
      }
    },
    "/componentTemplate": {
      "parameters": [],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command returns a JSON representation of all component templates.",
        "operationId": "getComponentTemplates",
        "summary": "Get information about all component templates on the server"
      }
    },
    "/componentTemplate/create": {
      "parameters": [],
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "createComponentTemplate",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "componentType": "STANDARD or ZOS",
                "description": "Component template description",
                "importAutomatically": "Optional, boolean. Force components to import versions automatically (true) or never import automatically (false). Leave blank to specify value when component is created.",
                "integrationAgent": "ID of the Agent to use for importing new component versions (Optional)",
                "integrationTag": "Tag name of the Agent to use for importing new component versions (Optional)",
                "name": "Component template name or ID",
                "properties": {
                  "Source configuration plugin property name": "Property value"
                },
                "sourceConfigPluginName": "Name of the source configuration type"
              },
              "schema": {}
            }
          },
          "required": true
        },
        "summary": "Create a component template from a JSON file"
      }
    },
    "/componentTemplate/export": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Name or ID of the component template",
            "in": "query",
            "name": "componentTemplate",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "exportComponentTemplate",
        "summary": "Export a component template to a json file."
      }
    },
    "/componentTemplate/import": {
      "parameters": [],
      "put": {
        "parameters": [
          {
            "description": "Suppport values are UPGRADE_IF_EXISTS, CREATE_NEW_IF_EXISTS, FAIL_IF_DOESNT_EXIST, UPGRADE_IF_EXISTS, USE_EXISTING_IF_EXISTS. Default is UPGRADE_IF_EXISTS.",
            "in": "query",
            "name": "processUpgradeType",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "create or update.",
            "in": "query",
            "name": "disposition",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "importComponentTemplate",
        "summary": "Import component template from json file."
      }
    },
    "/componentTemplate/propSheetDef": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Name or ID of the component template",
            "in": "query",
            "name": "componentTemplate",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "getComponentTemplatePropDefs",
        "summary": "Get information about the property definitions for the component template"
      },
      "put": {
        "parameters": [
          {
            "description": "Name or ID of the component template",
            "in": "query",
            "name": "componentTemplate",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "updateComponentTemplatePropDefs",
        "requestBody": {
          "$ref": "#/components/requestBodies/updateApplicationTemplatePropDefs"
        },
        "summary": "Update a component template prop-def sheet from a JSON file. Replaces the property definitions."
      }
    },
    "/componentTemplate/teams": {
      "parameters": [],
      "delete": {
        "parameters": [
          {
            "description": "Name or ID of the component template",
            "in": "query",
            "name": "componentTemplate",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the team",
            "in": "query",
            "name": "team",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the type to use. Leave blank if you are using the type \"Standard Component Template\".",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "operationId": "removeComponentTemplateFromTeam",
        "summary": "Remove a component template from a team"
      },
      "put": {
        "parameters": [
          {
            "description": "Name or ID of the component template",
            "in": "query",
            "name": "componentTemplate",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the team",
            "in": "query",
            "name": "team",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the type to use. Leave blank if you are using the type \"Standard Component Template\".",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "operationId": "addComponentTemplateToTeam",
        "summary": "Add a component template to a team"
      }
    },
    "/deploymentTrigger": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "ID of the environment.",
            "in": "query",
            "name": "environment",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command returns a JSON representation of all deployment triggers for an environment.",
        "operationId": "getDeploymentTriggers",
        "summary": "Get information about all deployment triggers for an environment."
      },
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command creates a deployment trigger for the given environment, component, application process, and user.",
        "operationId": "createDeploymentTrigger",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "applicationProcess": "Required. ID of the application process.",
                "component": "Required. Name or ID of the component.",
                "environment": "Required. ID of the environment.",
                "executingUser": "Required. Name or ID of the user to execute the deployment."
              },
              "schema": {}
            }
          },
          "required": true
        },
        "summary": "Create a deployment trigger."
      }
    },
    "/deploymentTrigger/executingUsers/{environment}": {
      "parameters": [
        {
          "description": "ID of the environment.",
          "in": "path",
          "name": "environment",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command returns a JSON representation of all users that can run deployment triggers.",
        "operationId": "getUsersThatCanRunDeploymentTriggers",
        "summary": "Get all users that can run deployment triggers."
      }
    },
    "/deploymentTrigger/{deploymentTriggerId}": {
      "parameters": [
        {
          "description": "ID of the deployment trigger.",
          "in": "path",
          "name": "deploymentTriggerId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "delete": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "This command deletes a deployment trigger with the given ID.",
        "operationId": "deleteDeploymentTrigger",
        "summary": "Delete a deployment trigger."
      },
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command returns a JSON representation of a single deployment trigger.",
        "operationId": "getDeploymentTrigger",
        "summary": "Get information about a single deployment trigger."
      }
    },
    "/diagnostics/latency": {
      "parameters": [],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "getDatabaseLatency",
        "summary": "Gather statistics by runnning a database latency test. Result times are in milliseconds. This may take several seconds."
      }
    },
    "/environment/addBaseResource": {
      "parameters": [],
      "put": {
        "parameters": [
          {
            "description": "Name or ID of the environment",
            "in": "query",
            "name": "environment",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the application; this value is required if you specify the environment name instead of ID",
            "in": "query",
            "name": "application",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Path or ID of the resource to add",
            "in": "query",
            "name": "resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "addEnvironmentBaseResource",
        "summary": "Add a base resource to an environment"
      }
    },
    "/environment/componentProperties": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Name or ID of the environment",
            "in": "query",
            "name": "environment",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the application; this value is required if you specify the environment name instead of ID",
            "in": "query",
            "name": "application",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the component",
            "in": "query",
            "name": "component",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "These properties are defined on the component and their values are set on the environment.",
        "operationId": "getComponentEnvironmentProperties",
        "summary": "Get component environment properties for an environment"
      },
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command will set a component property value specifically for this environment.",
        "operationId": "setComponentEnvironmentProperty",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "application": "Name or ID of the application; this value is required if you specify the environment name instead of ID",
                "component": "Name or ID of the component",
                "environment": "Name or ID of the environment",
                "name": "Name of the property to set",
                "value": "Value of the property to set (optional)"
              },
              "schema": {}
            }
          },
          "required": true
        },
        "summary": "Set a component environment property value"
      }
    },
    "/environment/createEnvironment": {
      "parameters": [],
      "put": {
        "parameters": [
          {
            "description": "Application to add the environment to",
            "in": "query",
            "name": "application",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the new environment",
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Description of the new environment",
            "in": "query",
            "name": "description",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Color of the new environment, in hex format. For a REST call, URL encode the # symbol; for example, %23ff0000 for pure red. For a udclient command, put the color in hex format in quotes; for example '#ff0000'.",
            "in": "query",
            "name": "color",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Whether the environment requires approvals",
            "in": "query",
            "name": "requireApprovals",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Whether the environment allows self approvals",
            "in": "query",
            "name": "noSelfApprovals",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/plain": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "createEnvironment",
        "requestBody": {
          "$ref": "#/components/requestBodies/createEnvironment"
        },
        "summary": "Create a new environment"
      }
    },
    "/environment/createEnvironmentFromTemplate": {
      "parameters": [],
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command creates and Environment from a template and attaches it to the specified application.",
        "operationId": "createEnvironmentFromTemplate",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "applicationId": "Application ID associated with the Environment template.",
                "description": "Description (optional)",
                "name": "Environment name",
                "teamMappings": [
                  {
                    "resourceRoleId": "Id of Resource Type to apply to this team mapping (optional, can specify either this or resourceRoleLabel",
                    "resourceRoleLabel": "Name of Resource Type to apply to this team mapping (optional, can specify either this or resourceRoleId",
                    "teamId": "ID of a team, either this field or teamLabel are needed to specify a team",
                    "teamLabel": "Name of the team to map the environment to, either this field or teamId are needed to specify a team"
                  }
                ],
                "templateId": "ID of the template to use, either this field or templateName are required.",
                "templateName": "Name of a template to use, either this field or templateId are required.",
                "templateProperties": [
                  {
                    "name": "The name of the property defined on the template. Required properties must be included here",
                    "value": "Value of the property to set on the new environment"
                  }
                ]
              },
              "schema": {}
            }
          },
          "required": true
        },
        "summary": "Create a new environment from template"
      }
    },
    "/environment/deleteEnvironment": {
      "parameters": [],
      "delete": {
        "parameters": [
          {
            "description": "Name or ID of the environment",
            "in": "query",
            "name": "environment",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the application; this value is required if you specify the environment name instead of ID",
            "in": "query",
            "name": "application",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Specify true to delete all resources in this environment, including all subresources. If this value and 'deleteCloudInstances' is set to true, then all agent objects in use by this environment will be deleted when the agent goes offline.  (Optional)",
            "in": "query",
            "name": "deleteAttachedResources",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Specify true to delete any associated instances in the cloud provider; this parameter is valid only for environments that were created dynamically along with the environment (Optional)",
            "in": "query",
            "name": "deleteCloudInstances",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "operationId": "deleteEnvironment",
        "summary": "Delete an environment"
      }
    },
    "/environment/getBaseResources": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Name or ID of the environment",
            "in": "query",
            "name": "environment",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the application; this value is required if you specify the environment name instead of ID",
            "in": "query",
            "name": "application",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command returns a listing of all resources added as base resources to an environment.",
        "operationId": "getEnvironmentBaseResources",
        "summary": "Get all base resources for an environment"
      }
    },
    "/environment/getEnvironmentResourceTree": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Name or ID of the environment",
            "in": "query",
            "name": "environment",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the application. This is required when using environment name.",
            "in": "query",
            "name": "application",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "getEnvironmentResourceTree",
        "summary": "Get resource tree for an environment"
      }
    },
    "/environment/getProperties": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Name or ID of the environment",
            "in": "query",
            "name": "environment",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the application; this value is required if you specify the environment name instead of ID",
            "in": "query",
            "name": "application",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "getEnvironmentProperties",
        "summary": "Get environment property values"
      }
    },
    "/environment/getProperty": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Name of the property",
            "in": "query",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the environment",
            "in": "query",
            "name": "environment",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the application; this value is required if you specify the environment name instead of ID",
            "in": "query",
            "name": "application",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/plain": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "getEnvironmentProperty",
        "summary": "Get the value of a custom property on an environment."
      }
    },
    "/environment/info": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Name or ID of the environment",
            "in": "query",
            "name": "environment",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the application; this value is required if you specify the environment name instead of ID",
            "in": "query",
            "name": "application",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command returns a JSON representation of an environment.",
        "operationId": "getEnvironment",
        "summary": "Get information about an environment"
      }
    },
    "/environment/propValue": {
      "parameters": [],
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "setEnvironmentProperty",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "application": "Name or ID of the application; this value is required if you specify the environment name instead of ID",
                "description": "The description of the property (optional)",
                "environment": "Name or ID of the environment",
                "isSecure": "Whether the property is secure; the default is the current state of the property, or false if the property is not yet specified (optional)",
                "label": "The label of the property (optional)",
                "name": "Name of the property to set",
                "value": "Value of the property to set (optional)"
              },
              "schema": {}
            }
          },
          "required": true
        },
        "summary": "Set a property on environment"
      }
    },
    "/environment/provisionEnvironment": {
      "parameters": [],
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command provisions an instance of an application blueprint and creates an application environment based on that blueprint.",
        "operationId": "provisionEnvironment",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "application": "Application name or ID (required if you are specifying the blueprint by name",
                "baseResource": "Path to the resource node to create this environment in",
                "blueprint": "Blueprint name or ID",
                "description": "Description (optional)",
                "name": "Environment name",
                "nodeProperties": {
                  "Path to the resource node, such as /path/to/resource/node": {
                    "Name of node property": "Value or node property"
                  }
                }
              },
              "schema": {}
            }
          },
          "required": true
        },
        "summary": "Provision a cloud environment"
      }
    },
    "/environment/removeBaseResource": {
      "parameters": [],
      "put": {
        "parameters": [
          {
            "description": "Name or ID of the environment",
            "in": "query",
            "name": "environment",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the application; this value is required if you specify the environment name instead of ID",
            "in": "query",
            "name": "application",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Path or ID of the resource to remove",
            "in": "query",
            "name": "resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "removeEnvironmentBaseResource",
        "summary": "Remove a base resource from an environment"
      }
    },
    "/environment/teams": {
      "parameters": [],
      "delete": {
        "parameters": [
          {
            "description": "Name or ID of the application; this value is required if you specify the environment name instead of ID",
            "in": "query",
            "name": "application",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the environment",
            "in": "query",
            "name": "environment",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the team",
            "in": "query",
            "name": "team",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the type to use. Leave blank if you are using the type \"Standard Application\".",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "operationId": "removeEnvironmentFromTeam",
        "summary": "Remove an environment from a team"
      },
      "put": {
        "parameters": [
          {
            "description": "Name or ID of the application; this value is required if you specify the environment name instead of ID",
            "in": "query",
            "name": "application",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the environment",
            "in": "query",
            "name": "environment",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the team",
            "in": "query",
            "name": "team",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the type to use. Leave blank if you are using the type \"Standard Application\".",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "operationId": "addEnvironmentToTeam",
        "summary": "Add an environment to a team"
      }
    },
    "/environment/update": {
      "parameters": [],
      "put": {
        "parameters": [
          {
            "description": "Name or ID of the environment",
            "in": "query",
            "name": "environment",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the application; this value is required if you specify the environment name instead of ID",
            "in": "query",
            "name": "application",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "updateEnvironment",
        "requestBody": {
          "$ref": "#/components/requestBodies/createEnvironment"
        },
        "summary": "Update an environment"
      }
    },
    "/environment/{environmentId}/latestDesiredInventory/": {
      "parameters": [
        {
          "description": "Name or ID of the environment",
          "in": "path",
          "name": "environmentId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command returns a JSON array of all of the desired inventory for an environment.",
        "operationId": "getLatestDesiredInventory",
        "summary": "Get the latest desired inventory for an environment."
      }
    },
    "/environment/{environmentId}/latestDesiredInventory/{groupVersions}": {
      "parameters": [
        {
          "description": "Name or ID of the environment",
          "in": "path",
          "name": "environmentId",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "True if the versions should be grouped by component.",
          "in": "path",
          "name": "groupVersions",
          "required": true,
          "schema": {
            "type": "boolean"
          }
        }
      ],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command returns a JSON array of all of the desired inventory for an environment. It optionally groups the desired inventory by component.",
        "operationId": "getAllLatestDesiredInventory",
        "summary": "Get all of the latest desired inventory for an environment."
      }
    },
    "/environment/{environmentId}/redundantVersions/{componentId}": {
      "parameters": [
        {
          "in": "path",
          "name": "environmentId",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "Name or ID of the component",
          "in": "path",
          "name": "componentId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "delete": {
        "parameters": [
          {
            "description": "If set to true, redundant versions will be removed from the environment's inventory.",
            "in": "query",
            "name": "deleteRedundant",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "A version is considered redundant if all of its files have been replaced by versions that have been deployed more recently to the same environment.",
        "operationId": "deleteRedundantDesiredInventoryVersions",
        "summary": "Delete all redundant versions for a component in an environment"
      }
    },
    "/environment/{environmentId}/versions/{componentId}": {
      "parameters": [
        {
          "in": "path",
          "name": "environmentId",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "Name or ID of the component",
          "in": "path",
          "name": "componentId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "delete": {
        "parameters": [
          {
            "description": "If set to true, versions will be removed from the environment's inventory.",
            "in": "query",
            "name": "deleteVersions",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "deleteAllDesiredInventoryVersions",
        "summary": "Delete all versions for a component in an environment"
      }
    },
    "/environment/{environmentId}/{componentId}/{resourceId}/overlappingArtifacts/{versionId}": {
      "parameters": [
        {
          "description": "Name or ID of the resource",
          "in": "path",
          "name": "resourceId",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "Name or ID of the version to check risky status",
          "in": "path",
          "name": "versionId",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "Name or ID of the environment",
          "in": "path",
          "name": "environmentId",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "Name or ID of the component",
          "in": "path",
          "name": "componentId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "Get all artifacts that are overlapped by later versions. A version is considered safe to rollback if it does not contain overlapping artifacts. It is risky to roll back a version if that version contains overlapping artifacts. This command applies only to z/OS component versions. ",
        "operationId": "getOverlappingArtifacts",
        "summary": "Get all artifacts overlapped in the given version"
      }
    },
    "/environment/{environment}/snapshot": {
      "parameters": [
        {
          "description": "Name or ID of the environment",
          "in": "path",
          "name": "environment",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "parameters": [
          {
            "description": "Name or ID of the application; this value is required if you specify the environment name instead of ID",
            "in": "query",
            "name": "application",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "getLatestSnapshotForEnvironment",
        "summary": "Get the latest snapshot deployed to an environment"
      }
    },
    "/environmentTemplate/create": {
      "parameters": [],
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "createEnvironmentTemplate",
        "requestBody": {
          "$ref": "#/components/requestBodies/createEnvironmentTemplate"
        },
        "summary": "Create a new environment template"
      }
    },
    "/environmentTemplate/delete": {
      "parameters": [],
      "delete": {
        "parameters": [
          {
            "description": "ID of the environment template",
            "in": "query",
            "name": "environmentTemplate",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "operationId": "deleteEnvironmentTemplate",
        "summary": "Delete an environment template"
      }
    },
    "/environmentTemplate/info": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "ID of the environment template",
            "in": "query",
            "name": "environmentTemplate",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command returns a JSON representation of an environment template",
        "operationId": "getEnvironmentTemplate",
        "summary": "Get information about an environment template"
      }
    },
    "/environmentTemplate/propSheetDef": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "ID of the environment template",
            "in": "query",
            "name": "environmentTemplate",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "getEnvironmentTemplatePropDefs",
        "summary": "Get information about the property definitions for the environment template"
      },
      "put": {
        "parameters": [
          {
            "description": "ID of the environment template",
            "in": "query",
            "name": "environmentTemplate",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "updateEnvironmentTemplatePropDefs",
        "requestBody": {
          "$ref": "#/components/requestBodies/updateApplicationTemplatePropDefs"
        },
        "summary": "Update an environment template prop sheet def from a JSON file."
      }
    },
    "/environmentTemplate/update": {
      "parameters": [],
      "put": {
        "parameters": [
          {
            "description": "ID of the environment template",
            "in": "query",
            "name": "environmentTemplate",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "updateEnvironmentTemplate",
        "requestBody": {
          "$ref": "#/components/requestBodies/createEnvironmentTemplate"
        },
        "summary": "Update the basic settings of an environment template"
      }
    },
    "/frontendServer": {
      "parameters": [],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "Get information about all frontend servers.",
        "operationId": "getFrontendServers",
        "summary": "Get a list of frontend servers."
      }
    },
    "/frontendServer/{serverId}": {
      "parameters": [
        {
          "description": "Unique id of the server from installed.properties.",
          "in": "path",
          "name": "serverId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "delete": {
        "responses": {
          "200": {
            "content": {
              "text/plain": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "Used to remove frontend servers which are no longer active.",
        "operationId": "deleteFrontendServer",
        "summary": "Delete a frontend server."
      }
    },
    "/group/addUser": {
      "parameters": [],
      "put": {
        "parameters": [
          {
            "description": "Name of the user",
            "in": "query",
            "name": "user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the group",
            "in": "query",
            "name": "group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "addUserToGroup",
        "summary": "Add a user to a group"
      }
    },
    "/group/create": {
      "parameters": [],
      "put": {
        "parameters": [
          {
            "description": "Name of the group",
            "in": "query",
            "name": "group",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the Internal Storage authorization realm",
            "in": "query",
            "name": "authorizationRealm",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "Groups can only be created in Internal Storage authorization realms.",
        "operationId": "createGroup",
        "summary": "Create an empty group"
      }
    },
    "/group/delete": {
      "parameters": [],
      "put": {
        "parameters": [
          {
            "description": "Name of the group",
            "in": "query",
            "name": "group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "deleteGroup",
        "summary": "Delete a group"
      }
    },
    "/group/export": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Name of the group",
            "in": "query",
            "name": "group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "exportGroup",
        "summary": "List the members of a group"
      }
    },
    "/group/exportDetailed": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Name of the group",
            "in": "query",
            "name": "group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command lists the members of a group, including IDs and e-mail addresses.",
        "operationId": "exportDetailedGroup",
        "summary": "List the members of a group (detailed)"
      }
    },
    "/group/import": {
      "parameters": [],
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "Specify the details about the group in the JSON file. You can list one or more members of the new group in the 'users' array, or you can leave the array blank to create an empty group. Groups can be created only in Internal Storage authorization realms.",
        "operationId": "importGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "authorizationRealm": "Authorization realm name",
                "name": "Group name",
                "users": [
                  "User names"
                ]
              },
              "schema": {}
            }
          },
          "required": true
        },
        "summary": "Import a group"
      }
    },
    "/group/removeUser": {
      "parameters": [],
      "put": {
        "parameters": [
          {
            "description": "Name of the user",
            "in": "query",
            "name": "user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the group",
            "in": "query",
            "name": "group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "removeUserFromGroup",
        "summary": "Remove a user from a group"
      }
    },
    "/inventory/getResourceInventoryEntriesForComponent": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "ID or path to the resource, such as /ResourceGroup/Agents/Agent1",
            "in": "query",
            "name": "resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "ID or name of the component",
            "in": "query",
            "name": "component",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command returns a JSON array of current resource inventory entries for a component deployed to a resource. If there are no versions of the component deployed, the array will be empty. If there is one or more versions deployed, typically the first entry will correspond to a full version and subsequent entries will correspond to incremental versions. The entries are in ascending order by the date the entry was created, which will be when the deploying component process completed.",
        "operationId": "getResourceInventoryEntriesForComponent",
        "summary": "Get current resource inventory entries for a component"
      }
    },
    "/javaPackage/addJavaPackage": {
      "parameters": [],
      "post": {
        "parameters": [
          {
            "description": "Custom package name (typically, the file name of the package). Limited to 100 characters from [-_.0-9a-zA-Z]. Certain names that have special meaning as file names such as \"..\" or \"COM1\" are rejected.",
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "addJavaPackage",
        "requestBody": {
          "$ref": "#/components/requestBodies/restoreArtifacts"
        },
        "summary": "Upload a Java package."
      }
    },
    "/javaPackage/bulkGetPreferredJavaPackageForAgent": {
      "parameters": [],
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command gets the preferred Java packages compatible with the platforms of a set of agents. If no such package is currently defined for an agent, then no content is returned for the respective sub-request. Individual sub-requests may succeed or fail independently. A single request may contain up to 250 sub-requests.",
        "operationId": "bulkGetPreferredJavaPackageForAgent",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "README": "See entity attribute for the template description expected by this endpoint.",
                "entity": [
                  {
                    "agent": "Name or ID of the agent"
                  }
                ]
              },
              "schema": {}
            }
          },
          "required": true
        },
        "summary": "Get the preferred Java packages compatible with agents in bulk."
      }
    },
    "/javaPackage/deleteJavaPackage": {
      "parameters": [],
      "delete": {
        "parameters": [
          {
            "description": "Name or ID of the java package",
            "in": "query",
            "name": "package",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "operationId": "deleteJavaPackage",
        "summary": "Delete a java package."
      }
    },
    "/javaPackage/getJavaPackage": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Name or ID of the java package",
            "in": "query",
            "name": "package",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "getJavaPackage",
        "summary": "Get available Java packages."
      }
    },
    "/javaPackage/getJavaPackages": {
      "parameters": [],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "getJavaPackages",
        "summary": "Get available Java packages."
      }
    },
    "/javaPackage/getJavaPackagesForAgent": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Name or ID of the agent",
            "in": "query",
            "name": "agent",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "getJavaPackagesForAgent",
        "summary": "Get Java packages compatible with a specific agent."
      }
    },
    "/javaPackage/getPreferredJavaPackageForAgent": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Name or ID of the agent",
            "in": "query",
            "name": "agent",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command gets the preferred Java package compatible with the platform of an agent. If no such package is currently defined, then no content is returned.",
        "operationId": "getPreferredJavaPackageForAgent",
        "summary": "Get the preferred Java package compatible with an agent."
      }
    },
    "/javaPackage/setPreferredJavaPackage": {
      "parameters": [],
      "post": {
        "parameters": [
          {
            "description": "Name or ID of the java package",
            "in": "query",
            "name": "package",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "operationId": "setPreferredJavaPackage",
        "summary": "Sets a package as preferred for its OS and CPU, unsetting the previously preferred package if there was one."
      }
    },
    "/javaPackage/unsetPreferredJavaPackage": {
      "parameters": [],
      "post": {
        "parameters": [
          {
            "description": "Name or ID of the java package",
            "in": "query",
            "name": "package",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "operationId": "unsetPreferredJavaPackage",
        "summary": "Unsets a package as preferred for its OS and CPU, leaving no package as preferred."
      }
    },
    "/login": {
      "parameters": [],
      "put": {
        "responses": {
          "200": {
            "content": {
              "text/plain": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command creates an authentication token on the server. Subsequent udclient commands that you run use this token, so you do not have to specify credentials. The token is recorded locally in the user's home directory in the file .ucd/authToken. The token expires 24 hours after it was created. Use the logout command to delete the token and the authtoken file.",
        "operationId": "login",
        "summary": "Log in to the server"
      }
    },
    "/login/logout": {
      "parameters": [],
      "put": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "This command deletes the authentication token that is currently in use, and deletes the local file that contains information about this token.",
        "operationId": "logout",
        "summary": "Log out of the server"
      }
    },
    "/patternIntegrationProviderCLI/createBlueprint": {
      "parameters": [],
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "createBlueprintDesignerIntegration",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "description": "Description",
                "name": "Blueprint Designer name or ID",
                "properties": {
                  "landscaperPassword": "Landscaper password if useAdminCredentials is true",
                  "landscaperUrl": "URL of Landscaper server",
                  "landscaperUser": "Landscaper username if useAdminCredentials is true",
                  "useAdminCredentials": "Boolean value true/false"
                }
              },
              "schema": {}
            }
          },
          "required": true
        },
        "summary": "Create a blueprint designer integration from a JSON file"
      }
    },
    "/patternIntegrationProviderCLI/deleteBlueprint": {
      "parameters": [],
      "delete": {
        "parameters": [
          {
            "description": "UUID or Name of the Blueprint Pattern Integration",
            "in": "query",
            "name": "patternIntegration",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/plain": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "deleteBlueprintDesignerIntegration",
        "summary": "Delete a blueprint designer integration"
      }
    },
    "/postProcessingScript": {
      "parameters": [],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "Get information about post processing scripts.",
        "operationId": "getPostProcessingScripts",
        "summary": "Get a list of post processing scripts."
      }
    },
    "/postProcessingScript/create": {
      "parameters": [],
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "createPostProcessingScript",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "body": "The body of the script (required)",
                "description": "The description of the script (optional)",
                "name": "The name of the script (required)",
                "teamMappings": [
                  {
                    "resourceRoleId": "Id of Resource Type to apply to this team mapping (optional, can specify either this or resourceRoleLabel",
                    "resourceRoleLabel": "Name of Resource Type to apply to this team mapping (optional, can specify either this or resourceRoleId",
                    "teamId": "ID of a team, either this field or teamLabel are needed to specify a team",
                    "teamLabel": "Name of the team to map the environment to, either this field or teamId are needed to specify a team"
                  },
                  "(Optional)"
                ]
              },
              "schema": {}
            }
          },
          "required": true
        },
        "summary": "Create a post processing script from a JSON file"
      }
    },
    "/postProcessingScript/delete": {
      "parameters": [],
      "delete": {
        "parameters": [
          {
            "description": "Name/ID of the post processing script.",
            "in": "query",
            "name": "script",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "Used to remove processing scripts.",
        "operationId": "deletePostProcessingScript",
        "summary": "Delete a post processing script."
      }
    },
    "/postProcessingScript/script": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Name/ID of the script",
            "in": "query",
            "name": "script",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command returns a JSON representation of a post processing script.",
        "operationId": "getPostProcessingScript",
        "summary": "Get information about a post processing script"
      },
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command returns a JSON representation of a post processing script.",
        "operationId": "savePostProcessingScript",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "body": "The body of the script (required)",
                "description": "The description of the script (optional)",
                "id": "The id of the script (required)",
                "name": "The name of the script (required)",
                "teamMappings": [
                  {
                    "resourceRoleId": "Id of Resource Type to apply to this team mapping (optional, can specify either this or resourceRoleLabel",
                    "resourceRoleLabel": "Name of Resource Type to apply to this team mapping (optional, can specify either this or resourceRoleId",
                    "teamId": "ID of a team, either this field or teamLabel are needed to specify a team",
                    "teamLabel": "Name of the team to map the environment to, either this field or teamId are needed to specify a team"
                  },
                  "(Optional)"
                ]
              },
              "schema": {}
            }
          },
          "required": true
        },
        "summary": "Get information about a post processing script"
      }
    },
    "/postProcessingScript/teams": {
      "parameters": [],
      "put": {
        "parameters": [
          {
            "description": "Name/ID of the post processing script",
            "in": "query",
            "name": "script",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the team",
            "in": "query",
            "name": "team",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the type to use. Leave blank if you are using the type \"Standard Post Processing Script\"",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "addPostProcessingScriptToTeam",
        "summary": "Add a post processing script to a team"
      }
    },
    "/process": {
      "parameters": [],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command returns a JSON representation of all generic processes.",
        "operationId": "getAllProcesses",
        "summary": "Get information on all generic processes"
      }
    },
    "/process/create": {
      "parameters": [],
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "createGenericProcess",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "defaultResourceId": "DEPRECATED, legacy format which is single default resource ID.",
                "defaultResourceIds": [
                  "JSONArray of Default resource ID(s) This property takes precedence when both defaultResourceIds and defaultResourceId are present"
                ],
                "description": "Description. This template includes two steps: Download Artifacts and Run Shell as a good starting point for your process.",
                "name": "Process name or ID",
                "notificationScheme": "Name of notification scheme",
                "propDefs": [
                  {
                    "allowedValues": [
                      {
                        "label": "value"
                      }
                    ],
                    "defaultLabel": "defaultLabel",
                    "description": "description",
                    "httpBasePath": "httpBasePath",
                    "httpFormat": "httpFormat",
                    "httpLabelPath": "httpLabelPath",
                    "httpPassword": "httpPassword",
                    "httpUrl": "httpurl",
                    "httpUsername": "httpUsername",
                    "httpValuePath": "httpValuePath",
                    "label": "label",
                    "name": "name",
                    "pattern": "Pattern",
                    "required": "required",
                    "resolveHttpValuesUrl": "resolveHttpValuesUrl",
                    "type": "type",
                    "value": "value"
                  }
                ],
                "properties": {
                  "Property name": "Property value (Optional)"
                },
                "rootActivity": {
                  "children": [
                    {
                      "allowFailure": false,
                      "children": [],
                      "commandName": "Download Artifacts",
                      "impersonationUseSudo": false,
                      "name": "First step",
                      "pluginName": "Versioned File Storage",
                      "pluginVersion": 16,
                      "properties": {
                        "artifactSetBaseDir": "",
                        "compId": "${p:component.id}",
                        "directoryOffset": ".",
                        "fileExcludePatterns": "",
                        "fileIncludePatterns": "**/*",
                        "fullVerification": true,
                        "label": "${p:version.name",
                        "repositoryId": "${p:component/code_station/repository}",
                        "repositoryUrl": "${p:server.url}/vfs",
                        "resId": "${p:resource.id}",
                        "serverUrl": "${p:server.url}",
                        "setFileExecuteBits": false,
                        "syncMode": true,
                        "verifyFileIntegrity": false
                      },
                      "showHidden": false,
                      "type": "plugin",
                      "useImpersonation": false
                    },
                    {
                      "allowFailure": false,
                      "children": [],
                      "commandName": "Shell",
                      "impersonationUseSudo": false,
                      "name": "Second step",
                      "pluginName": "Shell",
                      "pluginVersion": 3,
                      "properties": {
                        "directoryOffset": ".",
                        "outputFile": "",
                        "runAsDaemon": false,
                        "scriptBody": "echo \"Hello World\"",
                        "shellInterpreter": ""
                      },
                      "showHidden": false,
                      "type": "plugin",
                      "useImpersonation": false
                    },
                    {
                      "children": [],
                      "name": "FINISH",
                      "type": "finish"
                    }
                  ],
                  "edges": [
                    {
                      "to": "First step",
                      "type": "ALWAYS",
                      "value": ""
                    },
                    {
                      "from": "First step",
                      "to": "Second step",
                      "type": "ALWAYS",
                      "value": ""
                    },
                    {
                      "from": "Second step",
                      "to": "FINISH",
                      "type": "ALWAYS",
                      "value": ""
                    }
                  ],
                  "name": "GRAPH",
                  "offsets": [
                    {
                      "name": "First step",
                      "x": "-65",
                      "y": "90"
                    },
                    {
                      "name": "Second step",
                      "x": "-70",
                      "y": "210"
                    },
                    {
                      "name": "FINISH",
                      "x": "-60",
                      "y": "450"
                    }
                  ],
                  "type": "graph"
                },
                "workingDir": "${p:resource/work.dir}/${p:process.name}"
              },
              "schema": {}
            }
          },
          "required": true
        },
        "summary": "Create a generic process"
      }
    },
    "/process/export": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Name or ID of the generic process",
            "in": "query",
            "name": "process",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "exportGenericProcess",
        "summary": "Export a process to a json file"
      }
    },
    "/process/import": {
      "parameters": [],
      "put": {
        "parameters": [
          {
            "description": "create or update",
            "in": "query",
            "name": "disposition",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "importGenericProcess",
        "summary": "Import process from json file."
      }
    },
    "/process/teams": {
      "parameters": [],
      "delete": {
        "parameters": [
          {
            "description": "Name or ID of the process.",
            "in": "query",
            "name": "process",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the team.",
            "in": "query",
            "name": "team",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the security type to use; the default is Standard Process.",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "operationId": "removeProcessFromTeam",
        "summary": "Remove a process from a team"
      },
      "put": {
        "parameters": [
          {
            "description": "Name or ID of the process",
            "in": "query",
            "name": "process",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the team",
            "in": "query",
            "name": "team",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the type to use. Leave blank if you are using the type \"Standard Process\".",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "operationId": "addProcessToTeam",
        "summary": "Add a process to a team"
      }
    },
    "/process/{process}/webhooks": {
      "parameters": [
        {
          "description": "Id or name of process",
          "in": "path",
          "name": "process",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "parameters": [
          {
            "description": "Id or name of webhook template.",
            "in": "query",
            "name": "webhookTemplate",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Url for the webhook",
            "in": "query",
            "name": "url",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "addWebhookToProcess",
        "summary": "Add a webhook to a process"
      }
    },
    "/process/{process}/webhooks/{webhook}": {
      "parameters": [
        {
          "description": "Id or name of process",
          "in": "path",
          "name": "process",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "Id of webhook",
          "in": "path",
          "name": "webhook",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "delete": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "operationId": "removeWebhookFromProcess",
        "summary": "Removes a webhook from a process"
      },
      "put": {
        "parameters": [
          {
            "description": "Id or name of webhook template.",
            "in": "query",
            "name": "webhookTemplate",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Url for the webhook",
            "in": "query",
            "name": "url",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "operationId": "updateWebhookForProcess",
        "summary": "Updates a webhook for a process"
      }
    },
    "/processRequest": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "A timestamp, in milliseconds from the UNIX epoch. If you specify this parameter, the server includes the process requests that were created after the specified timestamp. Defaults to 24 hours ago.",
            "in": "query",
            "name": "startTime",
            "required": false,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "A timestamp, in milliseconds from the UNIX epoch. If you specify this parameter, the server includes the process requests that were created before the specified timestamp. Defaults to the current time.",
            "in": "query",
            "name": "endTime",
            "required": false,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "An index number that specifies the application process request to start with. You can use this index number to page through results.",
            "in": "query",
            "name": "startIndex",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command returns a JSON representation of all generic process requests, up to a maximum of 100.",
        "operationId": "getProcessRequests",
        "summary": "Get information about all generic process requests on the server"
      },
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "requestProcess",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "processId": "ID of generic process",
                "processVersion": "(Optional) Version number of the process to run against. -1 (default) represents latest version",
                "properties": {
                  "Property name": "Property value (Optional)"
                },
                "resource": "Deprecated, use 'resources'(ID or path of resource to run the process against)",
                "resources": [
                  "Comma-separated list of IDs or paths of resources to run the process against. 'resource' parameter would be ignored if this is present"
                ]
              },
              "schema": {}
            }
          },
          "required": true
        },
        "summary": "Executes new generic process request(s) for resource(s)"
      }
    },
    "/processRequest/{requestId}": {
      "parameters": [
        {
          "description": "Id of process request",
          "in": "path",
          "name": "requestId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "getProcessRequest"
      }
    },
    "/relay": {
      "parameters": [],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "getRelays",
        "summary": "Get information about all relays a user has access to."
      }
    },
    "/relay/statuses": {
      "parameters": [],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "getRelayStatuses",
        "summary": "Returns a JSONObject with count of agent relays to status. Expected format:\n{\n    \"ONLINE\":4,\n    \"OFFLINE\":1,\n}\n\nRequires Settings Tab permission."
      }
    },
    "/resource": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Specify the path to a parent resource to show children  of that resource, such as /AllAgents/MyAgentGroup. Leave this field blank to show all top-level resources. (Optional)",
            "in": "query",
            "name": "parent",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the resource template (Optional)",
            "in": "query",
            "name": "template",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the blueprint (Optional)",
            "in": "query",
            "name": "blueprintId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the application (Required to look up blueprint by name)",
            "in": "query",
            "name": "application",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeInventory",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command returns a JSONArray representation of all top-level resources, or all children of a specified parent resource.",
        "operationId": "getResources",
        "summary": "List resources"
      }
    },
    "/resource/autodiscover": {
      "parameters": [],
      "put": {
        "parameters": [
          {
            "description": "ID or path to the resource, such as /ResourceGroup/Agents/Agent1",
            "in": "query",
            "name": "resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "operationId": "autoDiscoverResource"
      }
    },
    "/resource/copy": {
      "parameters": [],
      "put": {
        "parameters": [
          {
            "description": "ID or path to the resource, such as /ResourceGroup/Agents/Agent1",
            "in": "query",
            "name": "resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The path or id of the new parent",
            "in": "query",
            "name": "parent",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the resource template (Optional)",
            "in": "query",
            "name": "template",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the blueprint (Optional)",
            "in": "query",
            "name": "blueprintId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the application (Required to look up blueprint by name)",
            "in": "query",
            "name": "application",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "To update a resource's parent with this command, you must specify, at a minimum, the resource path or id, and optionally provide info for the resource template, blueprint, and application.",
        "operationId": "copyResource",
        "requestBody": {
          "$ref": "#/components/requestBodies/copyResource"
        },
        "summary": "Copy a resource into a new parent"
      }
    },
    "/resource/create": {
      "parameters": [],
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "createResource",
        "requestBody": {
          "$ref": "#/components/requestBodies/copyResource"
        },
        "summary": "Create a resource"
      }
    },
    "/resource/deleteProperty": {
      "parameters": [],
      "delete": {
        "parameters": [
          {
            "description": "ID or path to the resource, such as /ResourceGroup/Agents/Agent1",
            "in": "query",
            "name": "resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the resource template (Optional)",
            "in": "query",
            "name": "template",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the blueprint (Optional)",
            "in": "query",
            "name": "blueprintId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the application (Required to look up blueprint by name)",
            "in": "query",
            "name": "application",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the property",
            "in": "query",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "operationId": "deleteResourceProperty",
        "summary": "Delete a resource property"
      }
    },
    "/resource/deleteResource": {
      "parameters": [],
      "delete": {
        "parameters": [
          {
            "description": "ID or path to the resource, such as /ResourceGroup/Agents/Agent1",
            "in": "query",
            "name": "resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the resource template (Optional)",
            "in": "query",
            "name": "template",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the blueprint (Optional)",
            "in": "query",
            "name": "blueprintId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the application (Required to look up blueprint by name)",
            "in": "query",
            "name": "application",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "deleteResource",
        "summary": "Delete a resource"
      }
    },
    "/resource/deleteResourceRoleProperty": {
      "parameters": [],
      "delete": {
        "parameters": [
          {
            "description": "ID or path to the resource, such as /ResourceGroup/Agents/Agent1",
            "in": "query",
            "name": "resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the resource template (Optional)",
            "in": "query",
            "name": "template",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the blueprint (Optional)",
            "in": "query",
            "name": "blueprintId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the application (Required to look up blueprint by name)",
            "in": "query",
            "name": "application",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the property",
            "in": "query",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "operationId": "deleteResourceRoleProperty",
        "summary": "Delete a resource role property"
      }
    },
    "/resource/getProperties": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "ID or path to the resource, such as /ResourceGroup/Agents/Agent1",
            "in": "query",
            "name": "resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the resource template (Optional)",
            "in": "query",
            "name": "template",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the blueprint (Optional)",
            "in": "query",
            "name": "blueprintId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the application (Required to look up blueprint by name)",
            "in": "query",
            "name": "application",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "getResourceProperties",
        "summary": "List resource properties"
      }
    },
    "/resource/getProperty": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "ID or path to the resource, such as /ResourceGroup/Agents/Agent1",
            "in": "query",
            "name": "resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the resource template (Optional)",
            "in": "query",
            "name": "template",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the blueprint (Optional)",
            "in": "query",
            "name": "blueprintId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the application (Required to look up blueprint by name)",
            "in": "query",
            "name": "application",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the property",
            "in": "query",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/plain": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "getResourceProperty",
        "summary": "Get a resource property"
      }
    },
    "/resource/getResourceRoleProperties": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "ID or path to the resource, such as /ResourceGroup/Agents/Agent1",
            "in": "query",
            "name": "resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the resource template (Optional)",
            "in": "query",
            "name": "template",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the blueprint (Optional)",
            "in": "query",
            "name": "blueprintId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the application (Required to look up blueprint by name)",
            "in": "query",
            "name": "application",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "getResourceRoleProperties",
        "summary": "List resource role properties"
      }
    },
    "/resource/getResourceRoleProperty": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "ID or path to the resource, such as /ResourceGroup/Agents/Agent1",
            "in": "query",
            "name": "resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the resource template (Optional)",
            "in": "query",
            "name": "template",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the blueprint (Optional)",
            "in": "query",
            "name": "blueprintId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the application (Required to look up blueprint by name)",
            "in": "query",
            "name": "application",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the property",
            "in": "query",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/plain": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "getResourceRoleProperty",
        "summary": "Get a resource role property"
      }
    },
    "/resource/info": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "ID or path to the resource, such as /ResourceGroup/Agents/Agent1",
            "in": "query",
            "name": "resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the resource template (Optional)",
            "in": "query",
            "name": "template",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the blueprint (Optional)",
            "in": "query",
            "name": "blueprintId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the application (Required to look up blueprint by name)",
            "in": "query",
            "name": "application",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command returns a JSON representation of a resource, including its security settings.",
        "operationId": "getResource",
        "summary": "Get information about a resource"
      }
    },
    "/resource/move": {
      "parameters": [],
      "put": {
        "parameters": [
          {
            "description": "ID or path to the resource, such as /ResourceGroup/Agents/Agent1",
            "in": "query",
            "name": "resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The path or id of the new parent",
            "in": "query",
            "name": "parent",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the resource template (Optional)",
            "in": "query",
            "name": "template",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the blueprint (Optional)",
            "in": "query",
            "name": "blueprintId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the application (Required to look up blueprint by name)",
            "in": "query",
            "name": "application",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "To update a resource's parent with this command, you must specify, at a minimum, the resource path or id, and optionally provide info for the resource template, blueprint, and application.",
        "operationId": "moveResource",
        "requestBody": {
          "$ref": "#/components/requestBodies/copyResource"
        },
        "summary": "Update a resource's parent"
      }
    },
    "/resource/setProperty": {
      "parameters": [],
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "setResourceProperty",
        "requestBody": {
          "$ref": "#/components/requestBodies/setResourceRoleProperty"
        },
        "summary": "Set a property on a resource"
      }
    },
    "/resource/setResourceRoleProperty": {
      "parameters": [],
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "setResourceRoleProperty",
        "requestBody": {
          "$ref": "#/components/requestBodies/setResourceRoleProperty"
        },
        "summary": "Set a property on a resource"
      }
    },
    "/resource/tag": {
      "parameters": [],
      "delete": {
        "parameters": [
          {
            "description": "ID or path to the resource, such as /ResourceGroup/Agents/Agent1",
            "in": "query",
            "name": "resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the resource template (Optional)",
            "in": "query",
            "name": "template",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the blueprint (Optional)",
            "in": "query",
            "name": "blueprintId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the application (Required to look up blueprint by name)",
            "in": "query",
            "name": "application",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the tag",
            "in": "query",
            "name": "tag",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "operationId": "removeTagFromResource",
        "summary": "Remove a tag from a resource"
      },
      "get": {
        "parameters": [
          {
            "description": "ID or path to the resource, such as /ResourceGroup/Agents/Agent1",
            "in": "query",
            "name": "resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the resource template (Optional)",
            "in": "query",
            "name": "template",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the blueprint (Optional)",
            "in": "query",
            "name": "blueprintId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the application (Required to look up blueprint by name)",
            "in": "query",
            "name": "application",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "getTagsOnResource",
        "summary": "List the tags on a resource"
      },
      "put": {
        "parameters": [
          {
            "description": "ID or path to the resource, such as /ResourceGroup/Agents/Agent1",
            "in": "query",
            "name": "resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the resource template (Optional)",
            "in": "query",
            "name": "template",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the blueprint (Optional)",
            "in": "query",
            "name": "blueprintId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the application (Required to look up blueprint by name)",
            "in": "query",
            "name": "application",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the tag",
            "in": "query",
            "name": "tag",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Hex representation of the color for the tag, such as FF0000. This parameter is used only if the tag is being created.",
            "in": "query",
            "name": "color",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Description of the tag. This parameter is used only if the tag is being created.",
            "in": "query",
            "name": "description",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "operationId": "addTagToResource",
        "summary": "Add a tag to a resource"
      }
    },
    "/resource/teams": {
      "parameters": [],
      "delete": {
        "parameters": [
          {
            "description": "ID or path to the resource, such as /ResourceGroup/Agents/Agent1",
            "in": "query",
            "name": "resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the resource template (Optional)",
            "in": "query",
            "name": "template",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the blueprint (Optional)",
            "in": "query",
            "name": "blueprintId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the application (Required to look up blueprint by name)",
            "in": "query",
            "name": "application",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the team",
            "in": "query",
            "name": "team",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the type to use. Leave blank if you are using the type \"Standard Resource\".",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "operationId": "removeResourceFromTeam",
        "summary": "Remove a resource from a team"
      },
      "put": {
        "parameters": [
          {
            "description": "ID or path to the resource, such as /ResourceGroup/Agents/Agent1",
            "in": "query",
            "name": "resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the resource template (Optional)",
            "in": "query",
            "name": "template",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the blueprint (Optional)",
            "in": "query",
            "name": "blueprintId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the application (Required to look up blueprint by name)",
            "in": "query",
            "name": "application",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the team",
            "in": "query",
            "name": "team",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the type to use. Leave blank if you are using the type \"Standard Resource\".",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "operationId": "addResourceToTeam",
        "summary": "Add a resource to a team"
      }
    },
    "/resource/update": {
      "parameters": [],
      "put": {
        "parameters": [
          {
            "description": "ID or path to the resource, such as /ResourceGroup/Agents/Agent1",
            "in": "query",
            "name": "resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the resource template (Optional)",
            "in": "query",
            "name": "template",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the blueprint (Optional)",
            "in": "query",
            "name": "blueprintId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the application (Required to look up blueprint by name)",
            "in": "query",
            "name": "application",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "To update a resource with this command, you must specify all of the existing data for the resource.",
        "operationId": "updateResource",
        "requestBody": {
          "$ref": "#/components/requestBodies/copyResource"
        },
        "summary": "Update a resource"
      }
    },
    "/resource/withVersion": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Name or ID of the component",
            "in": "query",
            "name": "component",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Version name",
            "in": "query",
            "name": "version",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command returns a JSONArray representation of all resources that have the specified component version installed.",
        "operationId": "getResourcesWithComponentVersion",
        "summary": "List resources that have a specified component version"
      }
    },
    "/resourceTemplate": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Name or ID of resource template",
            "in": "query",
            "name": "template",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "getResourceTemplate",
        "summary": "Get a resource template"
      }
    },
    "/resourceTemplate/create": {
      "parameters": [],
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This method supports importing a resource template from a cloud system.",
        "operationId": "createResourceTemplate",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "cloudResourceId": "ID of cloud resource; leave blank when not cloud-based template (Optional)",
                "connection": "ID of cloud connection; leave blank when not cloud-based template (Optional)",
                "description": "Description",
                "isVsys": "Specify 'true' when cloud resource is Virtual System Pattern (non-classic) in IPAS 2.0 or ICO 2.0 cloud product, otherwise specify 'false' when cloud resource is using Weaver (for IWD, SCO, ICO, and IPAS versions before 2.0 and 'classic' virtual system pattern in IPAS 2.0 or ICO 2.0); leave blank when not cloud-based template (Optional)",
                "name": "Name for the resource template",
                "parentId": "ID of parent resource template; leave blank when none or creating cloud-based template (Optional)",
                "rootTeamMappings": "Array of team ids; if not specified, no teams will be mapped to Root Resource; format: [ {teamId: '<ID-of-team-1>'}, {teamId: '<ID-of-team-2>'}, ... ]; (Optional)",
                "teamMappings": "Array of team ids; if not specified, no teams will be mapped to Template; format: [ {teamId: '<ID-of-team-1>'}, {teamId: '<ID-of-team-2>'}, ... ]; (Optional)"
              },
              "schema": {}
            }
          },
          "required": true
        },
        "summary": "Create a resource template from a JSON file"
      }
    },
    "/resourceTemplate/createWithPrototypes": {
      "parameters": [],
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This method supports creating a resource template with multiple agent prototypes",
        "operationId": "createResourceTemplateWithAgentPrototypes",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "agentPrototypes": [
                  {
                    "components": "List of components to be mapped to the prototype; format: [ {component: '<name-or-ID-of-comp-1>'}, {component: '<name-or-ID-of-comp-2>'}, ... ]; (Optional)",
                    "agentNamePatterns": "List of name patterns (one per line) for matching agents; (Optional)",
                    "componentTags": "List of component tags to be mapped to the prototype; format: [ {componentTag: '<name-or-id-of-comp-tag-1>'}, {componentTag: '<name-or-id-of-comp-tag-2>'}, ... ]; (Optional)",
                    "description": "Description",
                    "name": "Name for the agent prototype",
                    "teamMappings": "Array of team ids; if not specified, no teams will be mapped to Template; format: [ {teamId: '<ID-of-team-1>'}, {teamId: '<ID-of-team-2>'}, ... ]; (Optional)"
                  }
                ],
                "description": "Description",
                "name": "Name for the resource template",
                "teamMappings": "Array of team ids; if not specified, no teams will be mapped to Template; format: [ {teamId: '<ID-of-team-1>'}, {teamId: '<ID-of-team-2>'}, ... ]; (Optional)"
              },
              "schema": {}
            }
          },
          "required": true
        },
        "summary": "Create a resource template with agent prototypes from a JSON file"
      }
    },
    "/resourceTemplate/getAgentPrototypes": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Name or ID of resource template",
            "in": "query",
            "name": "template",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "getAgentPrototypes",
        "summary": "Get all agent prototypes with this resource template as their ancestor"
      }
    },
    "/resourceTemplate/getChildren": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Name or ID of the resource template. If this is a blueprint identified by name rather than ID, a parent application must also be specified using the -application flag.",
            "in": "query",
            "name": "template",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the parent application. Required if the template represents an application blueprint identified by name.",
            "in": "query",
            "name": "application",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Get all descendants of the template (not just immediate children). Default is false.",
            "in": "query",
            "name": "recursive",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "Results include the base resource and resources inherited from ancestors of this template.",
        "operationId": "getResourceTemplateChildren",
        "summary": "Get all children or descendants of a resource template"
      }
    },
    "/resourceTemplate/update": {
      "parameters": [],
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "To update a resource template with this command, you must specify all of the existing data for the resource template as defined in the JSON data template, except 'teamMappings' which is optional.",
        "operationId": "updateResourceTemplate",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "description": "Description",
                "existingId": "ID of resource template; leave blank when creating new template",
                "name": "Name for the resource template",
                "rootTeamMappings": "Array of team ids; if not specified, no teams will be mapped to Root Resource; format: [ {teamId: '<ID-of-team-1>'}, {teamId: '<ID-of-team-2>'}, ... ]; (Optional)",
                "teamMappings": "Array of team ids; if not specified, no teams will be mapped to Template; format: [ {teamId: '<ID-of-team-1>'}, {teamId: '<ID-of-team-2>'}, ... ]; (Optional)"
              },
              "schema": {}
            }
          },
          "required": true
        },
        "summary": "Update a resource template from a JSON file"
      }
    },
    "/secretstore": {
      "parameters": [],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command returns a JSON representation of all secret stores.",
        "operationId": "getSecretStores",
        "summary": "Get information about all secret stores."
      }
    },
    "/secretstore/deleteSecretStore": {
      "parameters": [],
      "delete": {
        "parameters": [
          {
            "description": "Name or id of the secret store.",
            "in": "query",
            "name": "store",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "deleteSecretStore",
        "summary": "Delete a secret store."
      }
    },
    "/secretstore/info": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Name or id of the secret store.",
            "in": "query",
            "name": "store",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command returns a JSON representation of a secret store.",
        "operationId": "getSecretStore",
        "summary": "Get information about a secret store."
      }
    },
    "/secretstore/vault/create": {
      "parameters": [],
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "createVaultSecretStore",
        "requestBody": {
          "$ref": "#/components/requestBodies/updateVaultSecretStore"
        },
        "summary": "Create a secret store."
      }
    },
    "/secretstore/vault/update": {
      "parameters": [],
      "post": {
        "parameters": [
          {
            "description": "Name or id of the secret store.",
            "in": "query",
            "name": "store",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "updateVaultSecretStore",
        "requestBody": {
          "$ref": "#/components/requestBodies/updateVaultSecretStore"
        },
        "summary": "Update a secret store."
      }
    },
    "/snapshot/addStatusToSnapshot": {
      "parameters": [],
      "put": {
        "parameters": [
          {
            "description": "Name or ID of the snapshot.",
            "in": "query",
            "name": "snapshot",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the application; this value is required if you specify the snapshot name instead of the ID.",
            "in": "query",
            "name": "application",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the status. This value cannot be longer than 36 characters.",
            "in": "query",
            "name": "statusName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "addStatusToSnapshot",
        "summary": "Add a status to a snapshot"
      }
    },
    "/snapshot/addVersionToSnapshot": {
      "parameters": [],
      "put": {
        "parameters": [
          {
            "description": "Name or ID of the snapshot",
            "in": "query",
            "name": "snapshot",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the application; this value is required if you specify the snapshot name instead of ID",
            "in": "query",
            "name": "application",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the component version",
            "in": "query",
            "name": "version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the component; this value is required if you specify the component name instead of ID",
            "in": "query",
            "name": "component",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "operationId": "addVersionToSnapshot",
        "summary": "Add a component version to a snapshot"
      }
    },
    "/snapshot/createSnapshot": {
      "parameters": [],
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command creates a snapshot by specifying the components (optional, by IDs and/or names) for the snapshot, rather than taking a snapshot of an environment.",
        "operationId": "createSnapshot",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "application": "Application name or ID",
                "description": "Description",
                "name": "Snapshot name",
                "versions": "JSON array of mappings from components by name or ID to versions by name or ID, such as [{\"JPetStore-APP\": \"latest\"}, {\"JPetStore-DB\": \"1.0\"}, {\"3d6cd2fd-3381-4b95-b851-1aa7f83e225e\":\"c2c61215-c20a-4bc9-8f34-7f9f41de385b\"}]"
              },
              "schema": {}
            }
          },
          "required": true
        },
        "summary": "Create a snapshot"
      }
    },
    "/snapshot/createSnapshotOfEnvironment": {
      "parameters": [],
      "put": {
        "parameters": [
          {
            "description": "Name or ID of the environment",
            "in": "query",
            "name": "environment",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the application; this value is required if you specify the environment name instead of ID",
            "in": "query",
            "name": "application",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the new snapshot",
            "in": "query",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Snapshot description",
            "in": "query",
            "name": "description",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Exclude components with no resource in this environment (default false)",
            "in": "query",
            "name": "excludeUnmapped",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "createSnapshotOfEnvironment",
        "summary": "Take a snapshot of an environment"
      }
    },
    "/snapshot/deleteSnapshot": {
      "parameters": [],
      "delete": {
        "parameters": [
          {
            "description": "Name or ID of the snapshot",
            "in": "query",
            "name": "snapshot",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the application; this value is required if you specify the snapshot name instead of ID",
            "in": "query",
            "name": "application",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "operationId": "deleteSnapshot",
        "summary": "Delete a snapshot"
      }
    },
    "/snapshot/export": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Name or ID of the snapshot",
            "in": "query",
            "name": "snapshot",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the application; this value is required if you specify the snapshot name instead of ID",
            "in": "query",
            "name": "application",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "exportSnapshot",
        "summary": "Export a snapshot to a zip file."
      }
    },
    "/snapshot/getSnapshot": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Name or ID of the snapshot",
            "in": "query",
            "name": "snapshot",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the application; this value is required if you specify the snapshot name instead of ID",
            "in": "query",
            "name": "application",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "getSnapshot",
        "summary": "Get information about a snapshot"
      }
    },
    "/snapshot/getSnapshotConfiguration": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Name or ID of the snapshot",
            "in": "query",
            "name": "snapshot",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the application; this value is required if you specify the snapshot name instead of ID",
            "in": "query",
            "name": "application",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "getSnapshotConfiguration",
        "summary": "Get the list of configuration objects in a snapshot"
      }
    },
    "/snapshot/getSnapshotVersions": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Name or ID of the snapshot",
            "in": "query",
            "name": "snapshot",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the application; this value is required if you specify the snapshot name instead of ID",
            "in": "query",
            "name": "application",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "getSnapshotVersions",
        "summary": "Get the list of versions in a snapshot"
      }
    },
    "/snapshot/getStatusList": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Name or ID of the snapshot.",
            "in": "query",
            "name": "snapshot",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the application; this value is required if you specify the snapshot name instead of ID.",
            "in": "query",
            "name": "application",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "getStatusList",
        "summary": "Get a list of statuses on a snapshot"
      }
    },
    "/snapshot/import": {
      "parameters": [],
      "put": {
        "parameters": [
          {
            "description": "Suppport values are UPGRADE_IF_EXISTS, CREATE_NEW_IF_EXISTS, FAIL_IF_DOESNT_EXIST, UPGRADE_IF_EXISTS, USE_EXISTING_IF_EXISTS. Default is UPGRADE_IF_EXISTS.",
            "in": "query",
            "name": "componentUpgradeType",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Suppport values are UPGRADE_IF_EXISTS, CREATE_NEW_IF_EXISTS, FAIL_IF_DOESNT_EXIST, UPGRADE_IF_EXISTS, USE_EXISTING_IF_EXISTS. Default is UPGRADE_IF_EXISTS.",
            "in": "query",
            "name": "applicationUpgradeType",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Suppport values are UPGRADE_IF_EXISTS, CREATE_NEW_IF_EXISTS, FAIL_IF_DOESNT_EXIST, UPGRADE_IF_EXISTS, USE_EXISTING_IF_EXISTS. Default is UPGRADE_IF_EXISTS.",
            "in": "query",
            "name": "processUpgradeType",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Suppport values are UPGRADE_IF_EXISTS, CREATE_NEW_IF_EXISTS, FAIL_IF_DOESNT_EXIST, UPGRADE_IF_EXISTS, USE_EXISTING_IF_EXISTS. Default is UPGRADE_IF_EXISTS.",
            "in": "query",
            "name": "resourceTemplateUpgradeType",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Whether to import full resource tree or just base resources. true or false. Default false",
            "in": "query",
            "name": "importFullResourceTrees",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "create or update.",
            "in": "query",
            "name": "disposition",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "importSnapshot",
        "requestBody": {
          "$ref": "#/components/requestBodies/restoreArtifacts"
        },
        "summary": "Import snapshot from zip file."
      }
    },
    "/snapshot/inventoryChanges": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Name or ID of snapshot",
            "in": "query",
            "name": "snapshot",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the application",
            "in": "query",
            "name": "application",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of environment",
            "in": "query",
            "name": "environment",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of application process",
            "in": "query",
            "name": "applicationProcess",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "getInventoryChangesForSnapshot",
        "summary": "Get inventory changes for application process run with snapshot in environment"
      }
    },
    "/snapshot/lockSnapshotConfiguration": {
      "parameters": [],
      "put": {
        "parameters": [
          {
            "description": "Name or ID of the snapshot",
            "in": "query",
            "name": "snapshot",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the application; this value is required if you specify the snapshot name instead of ID",
            "in": "query",
            "name": "application",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "This command locks the configuration included in a snapshot. This prevents the snapshot from being affected by any future changes to the relevant configuration and also prevents users from manually changing which configuration the snapshot is using. This cannot be reversed.",
        "operationId": "lockSnapshotConfiguration",
        "summary": "Lock a snapshot's configuration"
      }
    },
    "/snapshot/lockSnapshotVersions": {
      "parameters": [],
      "put": {
        "parameters": [
          {
            "description": "Name or ID of the snapshot",
            "in": "query",
            "name": "snapshot",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the application; this value is required if you specify the snapshot name instead of ID",
            "in": "query",
            "name": "application",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "This command locks the list of component versions included in a snapshot. This cannot be reversed and prevents any future changes to the list of versions included in the snapshot.",
        "operationId": "lockSnapshotVersions",
        "summary": "Lock a snapshot's version list"
      }
    },
    "/snapshot/removeVersionFromSnapshot": {
      "parameters": [],
      "put": {
        "parameters": [
          {
            "description": "Name or ID of the snapshot",
            "in": "query",
            "name": "snapshot",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the application; this value is required if you specify the snapshot name instead of ID",
            "in": "query",
            "name": "application",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the component version",
            "in": "query",
            "name": "version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the component; this value is required if you specify the component name instead of ID",
            "in": "query",
            "name": "component",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "operationId": "removeVersionFromSnapshot",
        "summary": "Remove a component version from a snapshot"
      }
    },
    "/sshInstallAgent/installNewAgent": {
      "parameters": [],
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command installs an agent over SSH.",
        "operationId": "installAgent",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "host": "Host name or IP address of the system to install the agent on",
                "installDir": "Installation directory for the agent",
                "javaHomePath": "Path to Java on the agent system",
                "name": "Name of the agent resource",
                "port": "SSH port of the agent system; the default port is 22",
                "sshPassword": "SSH password for the agent system; leave blank to use public key authentication instead",
                "sshUsername": "SSH user name to use to connect to the agent system",
                "tempDirPath": "Path to directory to install from on the agent system",
                "webProxyUri": "Web socket URI for the relay server (e.g. https://relay:20080).",
                "webUri": "Web socket URI for the Deploy server (e.g. wss://server:7919)."
              },
              "schema": {}
            }
          },
          "required": true
        },
        "summary": "Install an agent"
      }
    },
    "/status": {
      "parameters": [],
      "delete": {
        "parameters": [
          {
            "description": "Type of status (inventory, version, or snapshot); this parameter is  required you specify the name of the status instead of the ID",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the status",
            "in": "query",
            "name": "status",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "deleteStatus",
        "summary": "Delete a status"
      }
    },
    "/status/createStatus": {
      "parameters": [],
      "post": {
        "parameters": [
          {
            "description": "Type of status (inventory, version, or snapshot)",
            "in": "query",
            "name": "type",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the new status",
            "in": "query",
            "name": "status",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Color of the new status (HTML color strings or valid color names) (Optional)",
            "in": "query",
            "name": "color",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Description of the new status (Optional)",
            "in": "query",
            "name": "description",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Specify true to make this status unique (Optional)",
            "in": "query",
            "name": "unique",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "createStatus",
        "summary": "Create a status"
      }
    },
    "/status/getStatus": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Type of status (inventory, version, or snapshot); this parameter is  required you specify the name of the status instead of the ID",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the status",
            "in": "query",
            "name": "status",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "getStatus",
        "summary": "Get information about a status"
      }
    },
    "/status/getStatuses": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Status type (inventory, version, or snapshot)",
            "in": "query",
            "name": "type",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command lists all the statuses that are associated with a specified status type.",
        "operationId": "getStatuses",
        "summary": "List statuses"
      }
    },
    "/systemConfiguration": {
      "parameters": [],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "These properties are available on the System Settings page of the server.",
        "operationId": "getSystemConfiguration",
        "summary": "List system configuration properties"
      },
      "put": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Use this command to set any of the properties on the System Settings page of the server. The JSON template for this command lists all of the properties that you can change, but you can omit properties that you are not changing.",
        "operationId": "setSystemConfiguration",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "agentAutoLicense": "Specify true to automatically assign licenses to agents",
                "artifactAgent": "Specify a default agent for component version imports.",
                "auditLogCleanupEnabled": "Whether the audit logs will be deleted after a given number of days.",
                "auditLogCleanupHour": "The hour when audit logs are cleaned; the value must be an integer from 0 (midnight) to 23 (11pm).",
                "auditLogCleanupMinute": "The minute when audit logs are cleaned; the value must be an integer from 0 to 59.",
                "auditLogReadEntriesEnabled": "Controls whether READ events are captured in the audit log.",
                "auditLogRetentionLength": "The number of days to retain audit log entries.",
                "cleanupArchivePath": "The path for archived component versions",
                "cleanupCountToKeep": "The number of component versions to keep",
                "cleanupDaysToKeep": "The number of days component versions are kept",
                "cleanupHourOfDay": "The time when versions are cleaned; the value must be an integer from 0 (midnight) to 23 (11 pm)",
                "defaultLocale": "The default locale to use for the system (determines language and date formats.)",
                "deleteEnvResources": "Enable deleting resources globally from an environment's resource tree or when deleting an environment.",
                "deployMailHost": "The host name of the mail server that is used for notifications",
                "deployMailPassword": "The user password for sending email notifications",
                "deployMailPort": "The SMTP port that is used by the notifications mail server",
                "deployMailSecure": "Specifies whether the SMTP connection is secure",
                "deployMailSender": "The sender address for email notifications",
                "deployMailUsername": "The user name for sending email notifications",
                "enableAllowFailure": "Controls whether the 'allow failure' option can be used on the steps in a workflow.",
                "enableInactiveLinks": "Specify true to show links to inactive objects",
                "enablePromptOnUse": "Controls whether user-entered values can be specified at process run time",
                "enableUIDebugging": "Changes how the UI resources are loaded so it is easier to debug problems in the UI if set. Enabling reduces UI performance.",
                "envCompPropsOverrideEnvProps": "Determines whether or not environment component properties will override environment properties.",
                "environmentCountToKeep": "The number of versions to retain for this environment. Lists the versions in order of the time of deployment to this environment, and exempts the first N from artifact cleanup. If an archive path is set, the versions that are cleaned up will be archived. If no archive path is set, the versions will be deleted. To retain all versions of a component, enter -1.",
                "environmentDaysToKeep": "The number of days since deployment to retain component versions which have been deployed to this environment. If an archive path is set, the versions that are cleaned up will be archived. If no archive path is set, the versions will be deleted. To retain component versions indefinitely, enter -1.",
                "externalApprovalAgent": "Specify a default agent to use for running External Approval Processes. Superseded by approvalAgentPool.",
                "externalApprovalAgentPool": "Specify a default agent pool to use for running External Approval Processes. Supersedes approvalAgent.",
                "externalURL": "The URL that agents use to connect to the server",
                "externalUserURL": "The URL that users enter to connect to the server",
                "failProcessesWithUnresolvedProperties": "Determines whether or not a process will fail when it encounters a property that cannot be resolved.",
                "historyCleanupDaysToKeep": "The number of days application process history is to be kept. -1 will disable application process history cleanup.",
                "historyCleanupDuration": "The maxiumum number of hours per day the history cleanup process can take; the value must be an integer from 1 to 23.",
                "historyCleanupEnabled": "The system will not delete any process history unless this is enabled.",
                "historyCleanupHour": "The time when application process history is cleaned; the value must be an integer from 0 (midnight) to 23 (11pm).",
                "historyCleanupMinute": "The minute when process history is cleaned; the value must be an integer from 0 to 59.",
                "integrationTag": "Specify an agent tag to use any agent with the given tag for version imports.",
                "licenseServerUrl": "The host name and port of the license server",
                "maintenanceModeEnabled": "When this option is enabled, the server will be in maintenance mode.",
                "minimumPasswordLength": "Determines the minimum length for passwords",
                "repoAutoIntegrationPeriod": "The number of seconds between the times that the server polls components for new versions",
                "requireCommentForProcessChanges": "When enabled, the user must provide a comment when saving changes to any process design.",
                "requireDigits": "Require new passwords to contain at least one number character.",
                "requireDuplicate": "Require new passwords to not match the username, actual name, or configured email.",
                "requireLowercase": "Require new passwords to contain at least one lowercase character.",
                "requireSpecials": "Require new passwords to contain at least one special character.",
                "requireUppercase": "Require new passwords to contain at least one uppercase character.",
                "skipCollectPropertiesForExistingAgents": "Controls whether or not agent properties will be updated when an existing agent reconnects to the server.",
                "snapshotDaysToKeep": "The number of days to retain snapshots. Snapshots are always kept if they are the most recently deployed snapshot in an environment. Each environment  can override this setting and retain snapshots longer. In this case a snapshot will only be deleted if it is not retained by an environment. If no environment is retaining the snapshot and the snapshot is older than the number of days in this setting, the server deletes the snapshot. To retain all snapshots indefinitely, enter -1.",
                "use.default.atr.if.not.specified": "Use the Default Auth Token Restriction for plugin steps that do not have an auth token restriction set. If false this will not restrict auth token usage at all. Any new version will have an auth token restriction.",
                "validateAgentIp": "Controls validation of agent IPs and hostnames. The first time the agent connects, its IP and hostname will be saved. In subsequent connections, if either has changed, the agent will be prevented from coming online."
              },
              "schema": {}
            }
          },
          "required": true
        },
        "summary": "Update the system configuration"
      }
    },
    "/systemConfiguration/getProperties": {
      "parameters": [],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command returns a JSONArray representation of the system properties, which behave like global variables for the server.",
        "operationId": "getSystemProperties",
        "summary": "List system properties"
      }
    },
    "/systemConfiguration/getProperty": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Name of the property",
            "in": "query",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "getSystemProperty",
        "summary": "Get the value of a system property"
      }
    },
    "/systemConfiguration/loggingConfig": {
      "parameters": [],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "Returns the current logging configuration. The output is suitable for input to the setLoggingConfig command.",
        "operationId": "getLoggingConfig",
        "summary": "Get logging configuration"
      },
      "put": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Sets the current logging configuration. The output of the getLoggingConfig command is acceptable input. To support this, several elements of the input template are optional and ignored, but must be valid if supplied. Regardless, the input is still subject to the constraints reported by these ignored elements. For example, objects for which 'deletable' is false must be present in the input as their absense is interpreted as a request for deletion.",
        "operationId": "setLoggingConfig",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "createdDate": "Timestamp when the object was created; ignored and optional",
                "logs": {
                  "createdDate": "Timestamp when the object was created; ignored and optional",
                  "deletable": "Reports if log can be deleted; ignored and optional",
                  "enabled": "Reports if log is enabled; the main log cannot be disabled",
                  "enabledMutable": "Reports if 'enabled' can be changed; ignored and optional",
                  "fileCount": "Number of rotated logs; must be at least 1",
                  "fileMegabytes": "Maximum log file size; ignored and optional if rotation is not SIZE",
                  "loggers": [
                    {
                      "createdDate": "Timestamp when the object was created; ignored and optional",
                      "deletable": "Reports if the logger can be deleted; ignored and optional",
                      "level": "The logging level; one of OFF|FATAL|ERROR|WARN|INFO|DEBUG|TRACE|ALL",
                      "logMutable": "Reports if the log assoctation can be changed; ignored and optional",
                      "modifiedDate": "Timestamp when the object last modified; ignored and optional",
                      "name": "Name of the logger; must be unique across all logs; '*' is the name of the root logger which must only be in the main log; up to 255 printable ASCII characters (no whitespace or control codes)",
                      "root": "Reports if this logger is the root logger; ignored and optional"
                    }
                  ],
                  "main": "Reports if this log is the main log; ignored and optional",
                  "modifiedDate": "Timestamp when the object last modified; ignored and optional",
                  "name": "Name of the log; must be unique; up to 64 characters from [-_0-9a-z]",
                  "rotation": "Rotation strategy: one of SIZE|HOURLY|DAILY|WEEKLY|MONTHLY",
                  "rotationMutable": "Reports if 'rotation' can be changed; ignored and optional"
                },
                "modifiedDate": "Timestamp when the object last modified; ignored and optional"
              },
              "schema": {}
            }
          },
          "required": true
        },
        "summary": "Get logging configuration"
      }
    },
    "/systemConfiguration/propValue": {
      "parameters": [],
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "System properties behave like global variables for the server.",
        "operationId": "setSystemProperty",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "description": "The description of the property (optional)",
                "isSecure": "Whether the property is secure; the default is the current state of the property, or false if the property is not yet specified (optional)",
                "label": "The label of the property (optional)",
                "name": "Name of the property",
                "value": "Value of the property (optional)"
              },
              "schema": {}
            }
          },
          "required": true
        },
        "summary": "Set a system property"
      }
    },
    "/tags": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Object type for the tags. e.g. Agent, Application, ApplicationTemplate, Component, ComponentTemplate, Resource",
            "in": "query",
            "name": "objectType",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command returns a JSON array containing all active tags for the given object type.",
        "operationId": "getTagsForType",
        "summary": "Get the Tags for an object type."
      }
    },
    "/team/create": {
      "parameters": [],
      "put": {
        "parameters": [
          {
            "description": "Name of the team",
            "in": "query",
            "name": "team",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Description of the team",
            "in": "query",
            "name": "description",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "createTeam",
        "summary": "Create a team"
      }
    },
    "/team/delete": {
      "parameters": [],
      "put": {
        "parameters": [
          {
            "description": "Name of the team",
            "in": "query",
            "name": "team",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "deleteTeam",
        "summary": "Delete a team"
      }
    },
    "/team/groups": {
      "parameters": [],
      "put": {
        "parameters": [
          {
            "description": "Name or ID of the group",
            "in": "query",
            "name": "group",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the team",
            "in": "query",
            "name": "team",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the role to give to the group",
            "in": "query",
            "name": "role",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/plain": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "addGroupToTeam",
        "summary": "Add a group to a role on a team"
      }
    },
    "/team/info": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Name of the team",
            "in": "query",
            "name": "team",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "getTeam",
        "summary": "List information about a team"
      }
    },
    "/team/infoAll": {
      "parameters": [],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command lists all teams on the server, all users in each team, and all of the roles that each user has on each team.",
        "operationId": "getAllTeams",
        "summary": "List teams"
      }
    },
    "/team/removeGroupFromTeam": {
      "parameters": [],
      "put": {
        "parameters": [
          {
            "description": "Name or ID of the group",
            "in": "query",
            "name": "group",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the team",
            "in": "query",
            "name": "team",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the role to remove from the group",
            "in": "query",
            "name": "role",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/plain": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "removeGroupFromRoleOnTeam",
        "summary": "Remove a group from a role on a team"
      }
    },
    "/team/removeUserFromTeam": {
      "parameters": [],
      "put": {
        "parameters": [
          {
            "description": "Name or ID of the user",
            "in": "query",
            "name": "user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the team",
            "in": "query",
            "name": "team",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the role to remove from the user",
            "in": "query",
            "name": "role",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/plain": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "removeUserFromRoleOnTeam",
        "summary": "Remove a user from a role on a team"
      }
    },
    "/team/update": {
      "parameters": [],
      "put": {
        "parameters": [
          {
            "description": "Name of the team to be changed",
            "in": "query",
            "name": "team",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "New name of the team",
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "New description of the team",
            "in": "query",
            "name": "description",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "Specify the team name in the 'team' parameter and use the 'name' and 'description' parameters to specify the desired changes.",
        "operationId": "updateTeam",
        "summary": "Update a team"
      }
    },
    "/team/users": {
      "parameters": [],
      "put": {
        "parameters": [
          {
            "description": "Name or ID of the user",
            "in": "query",
            "name": "user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the team",
            "in": "query",
            "name": "team",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the role to give to the user",
            "in": "query",
            "name": "role",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/plain": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "addUserToTeam",
        "summary": "Add a user to a role on a team"
      }
    },
    "/teamsecurity/groups": {
      "parameters": [],
      "put": {
        "parameters": [
          {
            "description": "Name or ID of the group",
            "in": "query",
            "name": "group",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the team",
            "in": "query",
            "name": "team",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the role to give to the group",
            "in": "query",
            "name": "role",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/plain": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "addGroupToTeam",
        "summary": "Add a group to a role on a team"
      }
    },
    "/teamsecurity/tokens": {
      "parameters": [],
      "put": {
        "parameters": [
          {
            "description": "The user this token is associated with",
            "in": "query",
            "name": "user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Expiration date and time of the token, in the format MM-DD-YYYY-HH:mm",
            "in": "query",
            "name": "expireDate",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Description of the authorization token",
            "in": "query",
            "name": "description",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Allowed IP addresses in CIDR notation, such as 192.169.1.0/24",
            "in": "query",
            "name": "allowedIps",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of id of auth token restrictions to apply to created auth token",
            "in": "query",
            "name": "restriction",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "Tokens provide authorization for agents, users, and external systems or applications. ",
        "operationId": "createAuthToken",
        "summary": "Create an authorization token"
      }
    },
    "/teamsecurity/users": {
      "parameters": [],
      "put": {
        "parameters": [
          {
            "description": "Name or ID of the user",
            "in": "query",
            "name": "user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the team",
            "in": "query",
            "name": "team",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the role to give to the user",
            "in": "query",
            "name": "role",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/plain": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "addUserToTeam",
        "summary": "Add a user to a role on a team"
      }
    },
    "/user/allUsersWithEmail": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "E-mail address of the user",
            "in": "query",
            "name": "email",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "getAllUsersWithEmail",
        "summary": "Get all users with a given e-mail address"
      }
    },
    "/user/byEmail": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "E-mail address of the user",
            "in": "query",
            "name": "email",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Specify true to retrieve all users with the e-mail address or false to return only the first user that matches the address",
            "in": "query",
            "name": "allUsers",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "getUserByEmail",
        "summary": "Get the user or users with a given e-mail address"
      }
    },
    "/user/create": {
      "parameters": [],
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "createUser",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "authenticationRealm": "Authentication realm ID",
                "email": "Email address",
                "name": "User name",
                "password": "Password"
              },
              "schema": {}
            }
          },
          "required": true
        },
        "summary": "Create a user"
      }
    },
    "/user/delete": {
      "parameters": [],
      "put": {
        "parameters": [
          {
            "description": "Name of the user",
            "in": "query",
            "name": "user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "deleteUser",
        "summary": "Delete a user"
      }
    },
    "/user/firstUserWithEmail": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "E-mail address of the user",
            "in": "query",
            "name": "email",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "getFirstUserWithEmail",
        "summary": "Get the first user with a given e-mail address"
      }
    },
    "/user/import": {
      "parameters": [],
      "put": {
        "parameters": [
          {
            "description": "Name or pattern of the users to be imported. Supports wildcard character *.",
            "in": "query",
            "name": "user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Authentication realm name or ID",
            "in": "query",
            "name": "authenticationRealm",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command adds one or more users from an LDAP realm to the server.",
        "operationId": "importLdapUser",
        "summary": "Import a user from LDAP"
      }
    },
    "/user/inRoleOnTeam": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Name or id of the role",
            "in": "query",
            "name": "role",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or id of the team",
            "in": "query",
            "name": "team",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command returns all users in a role for a given team, including users that are associated via a group membership",
        "operationId": "getAllUsersInRoleForTeam",
        "summary": "List all users with a given role on a team"
      }
    },
    "/user/info": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Name of the user",
            "in": "query",
            "name": "user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "getUser",
        "summary": "List information about a user"
      }
    },
    "/user/update": {
      "parameters": [],
      "put": {
        "parameters": [
          {
            "description": "Name of the user",
            "in": "query",
            "name": "user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "Specify the user name in the 'user' parameter and use the JSON string to specify new information about the user. This command can update the name and email address of the user, but not the password.",
        "operationId": "updateUser",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "actualName": "User real name (optional)",
                "email": "Email address (optional)"
              },
              "schema": {}
            }
          },
          "required": true
        },
        "summary": "Update a user"
      }
    },
    "/vault/appRole": {
      "parameters": [],
      "delete": {
        "parameters": [
          {
            "description": "Vault ID/Name",
            "in": "query",
            "name": "store",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the Vault App Role",
            "in": "query",
            "name": "vaultAppRole",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "operationId": "deleteVaultAppRole",
        "summary": "Delete a Vault AppRole"
      }
    },
    "/vault/appRole/appRolesInStore": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Name or ID of the Vault AppRole to retrieve",
            "in": "query",
            "name": "store",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command returns a list of app roles within the given Vault store represented as a JSON Array.",
        "operationId": "getVaultAppRoles",
        "summary": "List the Vault AppRoles for a Vault store"
      }
    },
    "/vault/appRole/create": {
      "parameters": [],
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "createVaultAppRole",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "name": "The Vault App Role Name (Required, Unique per Vault store)",
                "roleId": "The Vault Role ID (Required)",
                "secretId": "The Vault Secret ID (Optional)",
                "store": "Name/ID of the Vault store (Required)"
              },
              "schema": {}
            }
          },
          "required": true
        },
        "summary": "Create a new Vault App Role"
      }
    },
    "/vault/appRole/info": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Store ID/Name",
            "in": "query",
            "name": "store",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the Vault App Role",
            "in": "query",
            "name": "vaultAppRole",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "getVaultAppRole",
        "summary": "Get information about a Vault AppRole"
      }
    },
    "/vault/appRole/update": {
      "parameters": [],
      "post": {
        "parameters": [
          {
            "description": "Vault ID/Name",
            "in": "query",
            "name": "store",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the Vault App Role",
            "in": "query",
            "name": "vaultAppRole",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "updateVaultAppRole",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "name": "The Vault App Role Name (Optional, Unique per Vault store)",
                "roleId": "The Vault Role ID (Optional)",
                "secretId": "The Vault Secret ID (Optional)"
              },
              "schema": {}
            }
          },
          "required": true
        },
        "summary": "Update a Vault AppRole"
      }
    },
    "/version/addFiles": {
      "parameters": [],
      "post": {
        "parameters": [
          {
            "description": "Name/ID of the component (Only required if not using version ID)",
            "in": "query",
            "name": "component",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name/ID of the version",
            "in": "query",
            "name": "version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Local base directory for upload. All files inside this will be sent.",
            "in": "query",
            "name": "base",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Target path offset (the directory in the version files to which these files should be added)",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "An include file pattern for selecting files to add (may be repeated)",
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "An exclude file pattern for excluding files (may be repeated). Overrides includes.",
            "in": "query",
            "name": "exclude",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Saves execute bits for files.",
            "in": "query",
            "name": "saveExecuteBits",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "addVersionFiles",
        "summary": "Upload files to a version"
      }
    },
    "/version/addLink": {
      "parameters": [],
      "put": {
        "parameters": [
          {
            "description": "Name or ID of the component. This value is required if you specify a version name instead of an ID",
            "in": "query",
            "name": "component",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the version",
            "in": "query",
            "name": "version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the link to add",
            "in": "query",
            "name": "linkName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Value of the link to add",
            "in": "query",
            "name": "link",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Optional. If true, prioritize the link by placing it in the version page header for quicker access",
            "in": "query",
            "name": "isPriority",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command adds an external link on the specified component version.",
        "operationId": "addVersionLink",
        "summary": "Add a link on a version"
      }
    },
    "/version/addLinkWithName": {
      "parameters": [],
      "put": {
        "parameters": [
          {
            "description": "Name or ID of the component. This value is required if you specify a version name instead of an ID",
            "in": "query",
            "name": "component",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the version",
            "in": "query",
            "name": "version",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command adds an external link on the specified component version.",
        "operationId": "addVersionLinkWithName",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "isPriority": "Optional. If true, prioritize the link by placing it in the version page header for quicker access",
                "link": "Link url",
                "name": "Link name"
              },
              "schema": {}
            }
          },
          "required": true
        },
        "summary": "Add a link on a version"
      }
    },
    "/version/addStatus": {
      "parameters": [],
      "put": {
        "parameters": [
          {
            "description": "Name or ID of the component; this value is required if you specify the version name instead of ID",
            "in": "query",
            "name": "component",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the version",
            "in": "query",
            "name": "version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the status to apply",
            "in": "query",
            "name": "status",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "addVersionStatus",
        "summary": "Add a status to a version"
      }
    },
    "/version/archiveVersion": {
      "parameters": [],
      "put": {
        "parameters": [
          {
            "description": "Name or ID of the component",
            "in": "query",
            "name": "component",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the version(s) to be archived. This option can be repeated to archive multiple versions.",
            "in": "query",
            "name": "version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Archive path. An absolute path which overrides the System's archive path",
            "in": "query",
            "name": "path",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "archiveVersion",
        "summary": "Archive the given versions of a component"
      }
    },
    "/version/copyVersion": {
      "parameters": [],
      "post": {
        "parameters": [
          {
            "description": "Name or ID of the component",
            "in": "query",
            "name": "component",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the new version",
            "in": "query",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the version to copy",
            "in": "query",
            "name": "from",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Description of the new version",
            "in": "query",
            "name": "description",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Type to use for the new version (incremental or full); the default is the default version type for the component",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "Do not use the keywords latest, latestVersion, or newest as the version name. Artifacts are not copied to the created component version.",
        "operationId": "copyVersion",
        "summary": "Copy a component version with all of its properties"
      }
    },
    "/version/createManyVersions": {
      "parameters": [],
      "post": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Do not use the keywords latest, latestVersion, or newest as the version name.",
        "operationId": "createManyVersions",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "wrappedArray": [
                  {
                    "componentId": "Component identifier. If not specified componentName is required",
                    "componentName": "Component name. If not specified componentId is required",
                    "links": [
                      {
                        "isPriority": "Optional. If true, prioritize the link by placing it in the version page header for quicker access",
                        "link": "Link url",
                        "name": "Link name"
                      }
                    ],
                    "status": [
                      {
                        "name": "Status name"
                      }
                    ],
                    "version": "Version name to create"
                  }
                ]
              },
              "schema": {}
            }
          },
          "required": true
        },
        "summary": "Create multiple component versions"
      }
    },
    "/version/createVersion": {
      "parameters": [],
      "post": {
        "parameters": [
          {
            "description": "Name or ID of the component",
            "in": "query",
            "name": "component",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the new version",
            "in": "query",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Description of the new version",
            "in": "query",
            "name": "description",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Type to use for the new version (incremental or full) - full is the default.",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A system parameter.  This should not be provided by the user or by user scripts.",
            "in": "query",
            "name": "sourceConfigExecutionRecordId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Whether or not to mark this version as importing. Version marked as importing cannot be used in deployments. Default false",
            "in": "query",
            "name": "importing",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "Do not use the keywords latest, latestVersion, or newest as the version name.",
        "operationId": "createVersion",
        "summary": "Create a component version"
      }
    },
    "/version/createZOSVersion": {
      "parameters": [],
      "post": {
        "parameters": [
          {
            "description": "Name or ID of the component.",
            "in": "query",
            "name": "component",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the version to be created.",
            "in": "query",
            "name": "version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Type of version e.g. (INCREMENTAL or FULL).",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Type of repository e.g. ('CODESTATION' or 'HFS').",
            "in": "query",
            "name": "repositoryType",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Package Manifest file (e.g. packageManifest.xml).",
            "in": "query",
            "name": "file",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Whether or not to mark this version as importing. Version marked as importing cannot be used in deployments. Default false",
            "in": "query",
            "name": "importing",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command creates version files based on a packageManifest.xml. No files are uploaded for security reasons.",
        "operationId": "createZOSVersion",
        "summary": "Create a version for a z/OS package"
      }
    },
    "/version/deleteVersion": {
      "parameters": [],
      "put": {
        "parameters": [
          {
            "description": "Name or ID of the component",
            "in": "query",
            "name": "component",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the version(s) to be deleted. This option can be repeated to delete multiple versions.",
            "in": "query",
            "name": "version",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "deleteVersion",
        "summary": "Delete a version from a component"
      }
    },
    "/version/downloadArtifacts": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Name or ID of the component; this value is required if you specify the version name instead of ID",
            "in": "query",
            "name": "component",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the version",
            "in": "query",
            "name": "version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Path to download the artifacts to. You must have permission to create files in this location.",
            "in": "query",
            "name": "location",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Optional path to an individual version artifact to download. If specified, only that file will be downloaded.",
            "in": "query",
            "name": "singleFilePath",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Optional character encoding to determine the file names of the artifacts. Defaults to the encoding of the file system.",
            "in": "query",
            "name": "encoding",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command exports the artifacts of a component version into an archive file.",
        "operationId": "downloadVersionArtifacts",
        "summary": "Download the artifacts of a component version"
      }
    },
    "/version/finishedImporting": {
      "parameters": [],
      "post": {
        "parameters": [
          {
            "description": "Name or id of version",
            "in": "query",
            "name": "version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or id of the component. This is required if version name is used",
            "in": "query",
            "name": "component",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "Mark a version as completed importing so it is available for use in deployments",
        "operationId": "finishedImporting",
        "summary": "Mark a version as completed importing"
      }
    },
    "/version/getLink": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Name or ID of the component; this value is required if you specify the version name instead of ID",
            "in": "query",
            "name": "component",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the version",
            "in": "query",
            "name": "version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the link",
            "in": "query",
            "name": "linkName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "getVersionLink",
        "summary": "Get a link on a component version"
      }
    },
    "/version/getLinks": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Name or ID of the component; this value is required if you specify the version name instead of ID",
            "in": "query",
            "name": "component",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the version",
            "in": "query",
            "name": "version",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command lists all links that are associated with a specified component version.",
        "operationId": "getVersionLinks",
        "summary": "List links on a version"
      }
    },
    "/version/getVersionId": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Name or ID of the component; this value is required if you specify the version name instead of ID",
            "in": "query",
            "name": "component",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the version",
            "in": "query",
            "name": "version",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/plain": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "getVersionId",
        "summary": "Get a version ID"
      }
    },
    "/version/listVersionArtifacts": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Name or ID of the component; this value is required if you specify the version name instead of ID",
            "in": "query",
            "name": "component",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the version",
            "in": "query",
            "name": "version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Optional path to an individual version artifact to list.",
            "in": "query",
            "name": "singleFilePath",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "listArtifacts",
        "summary": "Get the list of artifacts for a version"
      }
    },
    "/version/removeLink": {
      "parameters": [],
      "delete": {
        "parameters": [
          {
            "description": "Name or ID of the component; this value is required if you specify the version name instead of ID",
            "in": "query",
            "name": "component",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the version",
            "in": "query",
            "name": "version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the link to remove",
            "in": "query",
            "name": "linkName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "removeVersionLink",
        "summary": "Remove a link from a version"
      }
    },
    "/version/removeLinkByName": {
      "parameters": [],
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "removeVersionLinkByName",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "component": "Name or ID of the component; this value is required if you specify the version name instead of ID",
                "name": "Name of the link",
                "version": "Name or ID of the version"
              },
              "schema": {}
            }
          },
          "required": true
        },
        "summary": "Remove a link from a version"
      }
    },
    "/version/restoreArtifacts": {
      "parameters": [],
      "put": {
        "parameters": [
          {
            "description": "Name/ID of the Component (Optional, required if version name specified instead of id",
            "in": "query",
            "name": "component",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name/ID of the version",
            "in": "query",
            "name": "version",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "Restore Artifacts of an archived version",
        "operationId": "restoreArtifacts",
        "requestBody": {
          "$ref": "#/components/requestBodies/restoreArtifacts"
        },
        "summary": "Restore artifacts of an archived version"
      }
    },
    "/version/status": {
      "parameters": [],
      "delete": {
        "parameters": [
          {
            "description": "Name or ID of the component; this value is required if you specify the version name instead of ID",
            "in": "query",
            "name": "component",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the version",
            "in": "query",
            "name": "version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the status to apply",
            "in": "query",
            "name": "status",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "removeVersionStatus",
        "summary": "Remove a status from a version"
      }
    },
    "/version/versionPropDefs": {
      "parameters": [],
      "delete": {
        "parameters": [
          {
            "description": "Name or ID of the component",
            "in": "query",
            "name": "component",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the property to delete",
            "in": "query",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "deleteComponentVersionPropDef",
        "summary": "Delete a component version property"
      },
      "get": {
        "parameters": [
          {
            "description": "Name or ID of the component",
            "in": "query",
            "name": "component",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "These properties are available to each version of the component.",
        "operationId": "getComponentVersionPropDefs",
        "summary": "List the version property definitions for a component"
      }
    },
    "/version/versionProperties": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Name or ID of the component; this value is required if you specify the version name instead of ID",
            "in": "query",
            "name": "component",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name or ID of the version",
            "in": "query",
            "name": "version",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "getVersionProperties",
        "summary": "List the properties on a component version"
      },
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "setVersionProperty",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "component": "Name or ID of the component; this value is required if you specify the version name instead of ID",
                "isSecure": "Whether the property is secure; the default is the current state of the property, or false if the property is not yet specified (optional)",
                "name": "Name of the property to set",
                "value": "Value of the property to set (optional)",
                "version": "Name or ID of the version"
              },
              "schema": {}
            }
          },
          "required": true
        },
        "summary": "Set a property on a component version"
      }
    },
    "/webhookTemplate": {
      "parameters": [],
      "delete": {
        "parameters": [
          {
            "description": "Name or ID of the webhook template to remove",
            "in": "query",
            "name": "webhookTemplate",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "operationId": "deleteWebhookTemplate",
        "summary": "Delete a webhook template"
      },
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "description": "This command returns a list of webhook templates represented as a JSON Array.",
        "operationId": "getWebhookTemplates",
        "summary": "List the viewable webhook templates"
      },
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "createWebhookTemplate",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "body": "The webhook template body specified with Apache Velocity template syntax",
                "description": "Description (Optional)",
                "name": "Name of the new webhook template",
                "teamMappings": [
                  {
                    "resourceRoleId": "Id of Resource Type to apply to this team mapping (optional, can specify either this or resourceRoleLabel",
                    "resourceRoleLabel": "Name of Resource Type to apply to this team mapping (optional, can specify either this or resourceRoleId",
                    "teamId": "ID of a team, either this field or teamLabel are needed to specify a team",
                    "teamLabel": "Name of the team to map the webhook template to, either this field or teamId are needed to specify a team"
                  }
                ],
                "type": "Webhook template type [PROCESS_SUCCESS, PROCESS_FAILURE, PROCESS_STARTED, APPROVAL_COMPLETED, APPROVAL_FAILED, EXTERNAL_APPROVAL_COMPLETED, EXTERNAL_APPROVAL_FAILED, SCHEDULED_PROCESS_NOT_STARTED, TASK_CREATED]"
              },
              "schema": {}
            }
          },
          "required": true
        },
        "summary": "Create a new webhook template"
      },
      "put": {
        "parameters": [
          {
            "description": "Name or ID of the webhook template to update",
            "in": "query",
            "name": "webhookTemplate",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "updateWebhookTemplate",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "body": "The webhook template body specified with Apache Velocity template syntax",
                "description": "Description (Optional)",
                "id": "ID of the webhook template to update",
                "name": "Name of the new webhook template",
                "teamMappings": [
                  {
                    "resourceRoleId": "Id of Resource Type to apply to this team mapping (optional, can specify either this or resourceRoleLabel",
                    "resourceRoleLabel": "Name of Resource Type to apply to this team mapping (optional, can specify either this or resourceRoleId",
                    "teamId": "ID of a team, either this field or teamLabel are needed to specify a team",
                    "teamLabel": "Name of the team to map the webhook template to, either this field or teamId are needed to specify a team"
                  }
                ],
                "type": "Webhook template type [PROCESS_SUCCESS, PROCESS_FAILURE, PROCESS_STARTED, APPROVAL_COMPLETED, APPROVAL_FAILED, EXTERNAL_APPROVAL_COMPLETED, EXTERNAL_APPROVAL_FAILED, SCHEDULED_PROCESS_NOT_STARTED, TASK_CREATED]"
              },
              "schema": {}
            }
          },
          "required": true
        },
        "summary": "Update a webhook template"
      }
    },
    "/webhookTemplate/info": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Name or ID of the webhook template to retrieve",
            "in": "query",
            "name": "webhookTemplate",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "getWebhookTemplate",
        "summary": "Get information about a webhook template"
      }
    },
    "/workflowTrace/cancel": {
      "parameters": [],
      "put": {
        "parameters": [
          {
            "description": "ID of the workflow to cancel.",
            "in": "query",
            "name": "workflow",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "cancelWorkflow",
        "summary": "Cancel a workflow in progress"
      }
    },
    "/workflowTrace/currentActivity": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "Parent request id. If specified, this returns any child workflows running under the process request.",
            "in": "query",
            "name": "parentRequestId",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "getCurrentActivityList",
        "summary": "Returns all child workflows of a parent request id if specified else returns all running workflow activities."
      }
    },
    "/workflowTrace/forceCancel": {
      "parameters": [],
      "put": {
        "parameters": [
          {
            "description": "ID of the workflow to force cancel.",
            "in": "query",
            "name": "workflow",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "forceCancelWorkflow",
        "summary": "Force cancel a workflow in progress"
      }
    },
    "/workflowTrace/fullTraceWithLogs": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "ID of the workflow.",
            "in": "query",
            "name": "workflow",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "getWorkflowTraceLogs",
        "summary": "Returns full workflow trace with execution logs as a zip file in the current directory.If the underlying workflow is not complete, an HTTP 412 response is returned."
      }
    },
    "/workflowTrace/pause": {
      "parameters": [],
      "put": {
        "parameters": [
          {
            "description": "ID of the workflow to pause.",
            "in": "query",
            "name": "workflow",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "pauseWorkflow",
        "summary": "Pause a workflow in progress"
      }
    },
    "/workflowTrace/resume": {
      "parameters": [],
      "put": {
        "parameters": [
          {
            "description": "ID of the workflow to resume.",
            "in": "query",
            "name": "workflow",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "resumeWorkflow",
        "summary": "Resume a workflow in progress"
      }
    },
    "/zInventory": {
      "parameters": [],
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "addZInventoryEntries",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "application": "Name or Id of the application.",
                "component": "Name or Id of the component.",
                "deploy-time": "Time in milliseconds.",
                "environment": "Name or Id of the environment.",
                "resources": [
                  {
                    "deploy-type": "Type of deployment for this resource.",
                    "inputs": "Inputs",
                    "name": "Filename of the entry.",
                    "operation-type": "Type of operation for this entry. e.g. 'Deploy' or 'Delete'.",
                    "target": "Target",
                    "target-type": "Type of the target for this resource."
                  }
                ],
                "version": "Name or Id of the version."
              },
              "schema": {}
            }
          },
          "required": true
        },
        "summary": "Add entries to Z inventory."
      }
    },
    "/zInventory/rollback": {
      "parameters": [],
      "post": {
        "parameters": [
          {
            "description": "Application name or id. This is required when specifying environment by name.",
            "in": "query",
            "name": "application",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Environment name or id.",
            "in": "query",
            "name": "environment",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Component name or id. This is required when specifying version by name.",
            "in": "query",
            "name": "component",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Version name or id.",
            "in": "query",
            "name": "version",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/plain": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "rollbackZInventoryEntries",
        "summary": "Rollback Z inventory."
      }
    },
    "/zInventory/search": {
      "parameters": [],
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful Response"
          }
        },
        "operationId": "searchZInventoryEntries",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "components": [
                  "Component name or id. Only one of applications, environments, or components may be specified."
                ],
                "applications": [
                  "Application name or id. Only one of applications, environments, or components may be specified."
                ],
                "environments": [
                  "Environment name or id. Only one of applications, environments, or components may be specified."
                ],
                "fileNameGlob": "File names to search for. Either this or versionNameGlob must be specified. Only one of fileNameGlob or versionNameGlob may be specified when filtering by applications, environments or components.",
                "includeInactive": "Boolean: default false. Whether or not to include inactive entries in the results.",
                "versionNameGlob": "Version names to search for. Either this or fileNameGlob must be specified. Only one of fileNameGlob or versionNameGlob may be specified when filtering by applications, environments or components."
              },
              "schema": {}
            }
          },
          "required": true
        },
        "summary": "Search Z inventory."
      }
    }
  },
  "components": {
    "requestBodies": {
      "addComponentResourcePropDef": {
        "content": {
          "application/json": {
            "example": {
              "allowedValues": "Comma separated list of allowed values in SELECT or MULTI_SELECT properties (Optional)",
              "component": "Name or ID of the component",
              "description": "Description for the property (Optional)",
              "label": "Label of the property (Optional)",
              "name": "Name of the property to set",
              "pattern": "A regular expression that specifies valid values for the property. Follows java.util.regex.Pattern (Optional)",
              "required": "Whether the property is required (Optional, Boolean)",
              "type": "the type of property definition; valid values are TEXT (the default), , TEXTAREA, CHECKBOX, SELECT, MULTI_SELECT, DATETIME, and SECURE)",
              "value": "Default value of the property definition (Optional)"
            },
            "schema": {}
          }
        },
        "required": true
      },
      "copyResource": {
        "content": {
          "application/json": {
            "example": {
              "agent": "Name or ID of an agent to use for automation (Optional)",
              "agentPool": "Name or ID of an agent pool to use for automation (Optional)",
              "component": "Name or ID of a component to associate with the resource (Optional)",
              "componentTag": "Name or ID of a component tag to associate with the resource; any components with that tag can be deployed to this resource (Optional)",
              "description": "Description",
              "impersonationForce": "Specify true to prevent children or steps from specifying their own impersonation settings (Optional)",
              "impersonationGroup": "Group for default impersonation (Optional)",
              "impersonationPassword": "Password for default impersonation. Agents running on Linux and Unix machines will ignore this value (Optional)",
              "impersonationUseSudo": "Specify true to use the sudo command for impersonation. Agents running on Windows machines will ignore this value (Optional)",
              "impersonationUser": "User name for default impersonation (Optional)",
              "name": "Name for the new resource; leave blank to inherit the name from an agent, pool, or role",
              "parent": "ID or path to parent resource; leave blank to create a root resource (Optional)",
              "role": "Name or ID of a resource role to associate with the agent; if this resource is for a component, specify the component name instead (Optional)",
              "roleProperties": {
                "Property name": "Property value (Optional)"
              }
            },
            "schema": {}
          }
        },
        "required": true
      },
      "createApplicationTemplate": {
        "content": {
          "application/json": {
            "example": {
              "description": "Application template description (Optional)",
              "enforceCompleteSnapshots": "Specify true to require an explicit version for each component",
              "name": "Application template name",
              "notificationScheme": "Notification scheme (Optional)",
              "onlyChangedVersions": "If true, the 'Only Deploy Changed Versions' deployment option will be checked by default (default: true)",
              "tagRequirements": [
                {
                  "name": "Name of the Component tag",
                  "number": "Number of components for the tag",
                  "type": "GREATER_THAN, LESS_THAN, or EQUALS"
                },
                " (Optional)"
              ],
              "teamMappings": [
                {
                  "resourceRoleId": "Id of Resource Type to apply to this team mapping (optional, can specify either this or resourceRoleLabel",
                  "resourceRoleLabel": "Name of Resource Type to apply to this team mapping (optional, can specify either this or resourceRoleId",
                  "teamId": "ID of a team, either this field or teamLabel are needed to specify a team",
                  "teamLabel": "Name of the team to map the environment to, either this field or teamId are needed to specify a team"
                },
                " (Optional)"
              ],
              "useWizard": "Specify true to use the Deployment Wizard when submitting application process request (default: false)"
            },
            "schema": {}
          }
        },
        "required": true
      },
      "createEnvironment": {
        "content": {
          "application/json": {
            "example": {
              "applicationId": "Application ID associated with the Environment template.",
              "cleanupCountToKeep": "Number of most recently deployed versions to keep (optional)",
              "cleanupDaysToKeep": "Number of days to keep versions deployed to this environment (optional)",
              "color": "HTML color code for the environment (optional)",
              "description": "Description (optional)",
              "exemptProcessesArray": "An array of process Ids. These processes will be exempt from approvals for this environment (optional).",
              "externalApprovalAgent": "Name or id of agent to run external approval processes on (optional).",
              "externalApprovalAgentPool": "Name or id of agent pool to run external approval processes on (optional).",
              "externalApprovalProcess": "Name or id of external approval process(optional).",
              "historyCleanupDaysToKeep": "Number of days to keep application process history for this environment (optional)",
              "inheritSystemCleanup": "Inherit the system cleanup settings. If set to true, this overrides the other cleanup attributes. (optional, boolean)",
              "lockSnapshots": "Whether snapshots will be locked when deployed to this environment (optional)",
              "name": "Environment name",
              "noSelfApprovals": "When this option is selected, users that submit deployment requests cannot approve their own requests (optional)",
              "requireApprovals": "Whether approvals will be required (optional)",
              "requireSnapshot": "If enabled, all deployments must use a snapshot instead of loose versions (optional)",
              "snapshotDaysToKeep": "Number of days to keep snapshots deployed to this environment (optional)",
              "teamMappings": [
                {
                  "resourceRoleId": "Id of Resource Type to apply to this team mapping (optional, can specify either this or resourceRoleLabel",
                  "resourceRoleLabel": "Name of Resource Type to apply to this team mapping (optional, can specify either this or resourceRoleId",
                  "teamId": "ID of a team, either this field or teamLabel are needed to specify a team",
                  "teamLabel": "Name of the team to map the environment to, either this field or teamId are needed to specify a team"
                }
              ],
              "useSystemDefaultDays": "Whether or not to use the system default number of days to keep application process history for this environment (optional)"
            },
            "schema": {}
          }
        },
        "required": true
      },
      "createEnvironmentTemplate": {
        "content": {
          "application/json": {
            "example": {
              "applicationTemplateId": "ID of the application template to which the environment template belongs",
              "cleanupCountToKeep": "Number of most recently deployed versions to keep (Optional)",
              "cleanupDaysToKeep": "Number of days to keep versions deployed to this environment (Optional)",
              "color": "HTML color code for the environment template",
              "description": "description of the template (Optional)",
              "environmentType": "type of environment, leave blank for Standard Environment",
              "exemptProcessesArray": "An array of process Ids. These processes will be exempt from approvals for this environment (Optional).",
              "externalApprovalAgent": "Name or id of agent to run external approval processes on (Optional).",
              "externalApprovalAgentPool": "Name or id of agent pool to run external approval processes on (Optional).",
              "externalApprovalProcess": "Name or id of external approval process(Optional).",
              "historyCleanupDaysToKeep": "Number of days to keep application process history for this environment (Optional)",
              "lockSnapshots": "Whether snapshots will be locked when deployed to this environment (Optional)",
              "name": "name of the environment template",
              "noSelfApprovals": "When this option is selected, users that submit deployment requests cannot approve their own requests (Optional)",
              "requireApprovals": "Whether approvals will be required (Optional)",
              "requireSnapshot": "If enabled, all deployments must use a snapshot instead of loose versions (Optional)",
              "resourceTemplate": "ID of the resource template to use",
              "snapshotDaysToKeep": "Number of days to keep snapshots deployed to this environment (Optional)",
              "snapshotLockType": "type of snapshot lock: ALL, VERSIONS, CONFIGURATION (Required with \"lockSnapshots\"",
              "teamMappings": [
                {
                  "resourceRoleId": "Id of Resource Type to apply to this team mapping (Optional, can specify either this or resourceRoleLabel",
                  "resourceRoleLabel": "Name of Resource Type to apply to this team mapping (Optional, can specify either this or resourceRoleId",
                  "teamId": "ID of a team, either this field or teamLabel are needed to specify a team",
                  "teamLabel": "Name of the team to map the environment to, either this field or teamId are needed to specify a team"
                },
                "(Optional)"
              ],
              "useSystemDefaultDays": "Whether or not to use the system default number of days to keep application process history for this environment (Optional)"
            },
            "schema": {}
          }
        },
        "required": true
      },
      "restoreArtifacts": {
        "content": {
          "application/octet-stream": {
            "schema": {}
          }
        },
        "required": true
      },
      "setResourceRoleProperty": {
        "content": {
          "application/json": {
            "example": {
              "application": "Name or ID of the application (Required to look up blueprint by name)",
              "blueprint": "Name or ID of the blueprint (optional)",
              "description": "The description of the property (optional)",
              "isSecure": "Whether the property is secure; the default is the current state of the property, or false if the property is not yet specified (optional)",
              "label": "The label of the property (optional)",
              "name": "Name of the property",
              "resource": "ID of resource or Path to the resource, such as /ResourceGroup/Agents/Agent1",
              "template": "Name or ID of the resource template (optional)",
              "value": "New value for the property (optional)"
            },
            "schema": {}
          }
        },
        "required": true
      },
      "updateApplicationPipeline": {
        "content": {
          "application/json": {
            "example": {
              "name": "name of the application pipeline",
              "stages": [
                {
                  "blocks": [
                    {
                      "environment": "name of the environment for this block",
                      "processes": [
                        "process-name"
                      ]
                    }
                  ],
                  "name": "name of the stage"
                }
              ]
            },
            "schema": {}
          }
        },
        "required": true
      },
      "updateApplicationTemplatePropDefs": {
        "content": {
          "application/json": {
            "example": {
              "README": "See entity attribute for the template description expected by this endpoint.",
              "entity": [
                {
                  "allowedValues": "Optional, array of elements {\"value\":\"Required, a value\",\"label\":\"Optional, defaults to value\"}",
                  "description": "Optional",
                  "httpAuthenticationType": "Optional, BASIC or BEARER",
                  "httpBasePath": "Optional",
                  "httpFormat": "JSON or XML",
                  "httpLabelPath": "Optional",
                  "httpPassword": "Optional",
                  "httpUrl": "Optional, required for Http property types",
                  "httpUsername": "Optional",
                  "httpValuePath": "Optional",
                  "label": "Optional, label displayed to user",
                  "name": "Required, the property name",
                  "pattern": "Optional, regular expression for the value",
                  "required": "Optional boolean, if the property is required",
                  "resolveHttpValuesUrl": "Optional",
                  "type": "Optional, Default TEXT, Type of property definition",
                  "value": "Optional, Default value"
                }
              ]
            },
            "schema": {}
          }
        },
        "required": true
      },
      "updateVaultSecretStore": {
        "content": {
          "application/json": {
            "example": {
              "description": "Secret Store description",
              "name": "Secret Store name",
              "namespace": "Vault Server Namespace (optional)",
              "teamMappings": {
                "resourceRoleId": "Id of Resource Type to apply to this team mapping (optional, can specify either this or resourceRoleLabel",
                "resourceRoleLabel": "Name of Resource Type to apply to this team mapping (optional, can specify either this or resourceRoleId",
                "teamId": "ID of a team, either this field or teamLabel are needed to specify a team",
                "teamLabel": "Name of the team to map the environment to, either this field or teamId are needed to specify a team"
              },
              "type": "vault",
              "url": "Vault Server URL"
            },
            "schema": {}
          }
        },
        "required": true
      }
    }
  }
}